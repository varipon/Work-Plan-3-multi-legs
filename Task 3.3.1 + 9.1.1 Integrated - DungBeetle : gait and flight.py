# ================
# SOFTWARE LICENSE
# ================

# The MIT License (MIT)

# Copyright (c) 2022 Yutaka Sawai (Varipon)

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# ==============================================================
# LICENSE FOR CONTENT PROCEDURALLY GENERATED USING THIS SOFTWARE
# ==============================================================

# All content procedurally generated by this software and its permutations
# are licensed under Creative Commons Attribution By 3.0:

# https://creativecommons.org/licenses/by/3.0/


#!/usr/bin/python

import bpy
from bpy import *

import mathutils
import math
from mathutils import *
from math import *


class Formula:

    def __init__(self, P, A, J, move, part, helicity, start, end):

        global interval
        global frame_start
        global frame_end

        self.interval = interval
        self.frame_start = frame_start
        self.frame_end = frame_end

        # pivot factor
        self.P = P

        # scale factor
        self.A = A 
        
        # joint number
        self.J = J

        # name
        self.move = move

        # element
        self.part = part

        # element helicity
        self.helicity = helicity

        self.start = start
        self.end = end

        # Create armature and object
        self.amt = bpy.data.armatures.new(move + '.' + part + '.' + helicity + '.data')
        self.rig = bpy.data.objects.new(move + '.' + part + '.' + helicity, self.amt)

        # Joints α(n) -> a[n], β(n) -> b[n], γ(n) -> y[n], δ(n) -> o[n]
        self.a = [0 for i in range(4)] # Joint α
        self.b = [0 for i in range(self.J)] # Joint β
        self.y = [0 for i in range(self.J)] # Joint γ
        self.o = [0 for i in range(self.J)] # Joint δ

        # Configuration Movement
        self.configMovement(self.P, self.A, self.J, self.a, self.b, self.y, self.o)

        # Construction Movement
        self.constructMovement(self.J, self.helicity, self.amt, self.rig, self.a, self.b, self.y, self.o)

        # Construction Rotation
        self.configRotation(self.rig, self.interval, self.frame_start, self.frame_end, self.start, self.end)

        # Configuration Linkage
        self.configLink(self.A, self.J, self.helicity, self.rig, self.move, self.part)

        # Construction Linkage
        self.constructLink(self.A, self.J, self.helicity, self.rig, self.move, self.part)


    def configMovement(self, P, A, J, a, b, y, o):

        mat_a = [0 for i in range(4)] # Joint α matrix
        mat_b = [0 for i in range(self.J)] # Joint β matrix
        mat_y = [0 for i in range(self.J)] # Joint γ matrix
        mat_o = [0 for i in range(self.J)] # Joint δ matrix

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        o[1] = mathutils.Euler((A, A, 0.0), 'XYZ')
        print ("o1 =", o[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D

        a[0] = mathutils.Euler((-A - E + (D * 0.5), -A - (D * 0.5), 0.0), 'XYZ')
        print ("a0 =", a[0])
        mat_a[0] = Matrix.Translation(a[0])

        a[3] = mathutils.Euler((0-a[0].x, 0-a[0].y, 0-a[0].z), 'XYZ')
        print ("a3 =", a[3])
        mat_a[3] = Matrix.Translation(a[3]) 

        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])
        mat_y[1] = Matrix.Translation(y[1])

### pattern A

        b[2] = mathutils.Euler((a[0].x + E + (A * 2), a[0].y + (A * 2), 0.0), 'XYZ')
        print ("b2 =", b[2])
        mat_b[2] = Matrix.Translation(b[2])

        b[3] = mathutils.Euler((a[0].x + E - (D * 0.5), a[0].y - (A * 2), 0.0), 'XYZ')
        print ("b3 =", b[3])
        mat_b[3] = Matrix.Translation(b[3])
        
        y[2] = mathutils.Euler((a[0].x + E, a[0].y, 0.0), 'XYZ')
        print ("y2 =", y[2])
        mat_y[2] = Matrix.Translation(y[2])

        y[3] = mathutils.Euler((a[0].x + E - (D * 0.5), a[0].y - (D * 0.5), 0.0), 'XYZ')
        print ("y3 =", y[3])
        mat_y[3] = Matrix.Translation(y[3])

        o[2] = mathutils.Euler((a[0].x + E + (A * 2), a[0].y - (A * 2), 0.0), 'XYZ')
        print ("o2 =", o[2])
        mat_o[2] = Matrix.Translation(o[2])
        
        o[3] = mathutils.Euler((a[0].x + E - (D * 0.5) - (A * 2), a[0].y - (D * 0.5) - (A * 2), 0.0), 'XYZ')
        print ("o3 =", o[3])
        mat_o[3] = Matrix.Translation(o[3])

### pattern A end

        org_rot_mat = Matrix.Rotation(math.radians(0), 4, 'Z')

        # define the rotation
        rot_mat = Matrix.Rotation(math.radians(-45), 4, 'Z')   

        for j in range(2, J - 2):

            mat_y[j + 2] = mat_a[0] @ org_rot_mat @ rot_mat @ mat_a[3] @ mat_y[j]

#            obj.matrix_world = mat_y[j + 2]
            # extract components back out of the matrix
            loc, rot, sca = mat_y[j + 2].decompose()
            y[j + 2] = mathutils.Euler(loc, 'XYZ')
            print("y"+str(j + 2)+" = ", y[j + 2], rot, sca)

            mat_b[j + 2] = mat_a[0] @ org_rot_mat @ rot_mat @ mat_a[3] @ mat_b[j]
            
#            obj.matrix_world = mat_b[j + 2]
            # extract components back out of the matrix
            loc, rot, sca = mat_b[j + 2].decompose()
            b[j + 2] = mathutils.Euler(loc, 'XYZ')
            print("b"+str(j + 2)+" = ", b[j + 2], rot, sca)

            mat_o[j + 2] = mat_a[0] @ org_rot_mat @ rot_mat @ mat_a[3] @ mat_o[j]
            
#            obj.matrix_world = mat_o[j + 2]
            # extract components back out of the matrix
            loc, rot, sca = mat_o[j + 2].decompose()
            o[j + 2] = mathutils.Euler(loc, 'XYZ')
            print("o"+str(j + 2)+" = ", o[j + 2], rot, sca)


    def constructMovement(self, J, helicity, amt, rig, a, b, y, o):

        # Linkages
        aa = [[0 for i in range(4)] for j in range(4)] # Link α(i) - α(j)
        ab = [[0 for i in range(4)] for j in range(4)] # Link α(i) - β(j)
        ya = [[0 for i in range(4)] for j in range(4)] # Link γ(i) - α(j)
        ao = [[0 for i in range(4)] for j in range(4)] # Link α(i) - δ(j)
        ob = [[0 for i in range(self.J)] for j in range(self.J)] # Link δ(i) - β(j)
        yy = [[0 for i in range(self.J)] for j in range(self.J)] # Link γ(i) - γ(j)
        by = [[0 for i in range(self.J)] for j in range(self.J)] # Link β(i) - γ(j)
        yo = [[0 for i in range(self.J)] for j in range(self.J)] # Link γ(i) - δ(j)

        rig.location = mathutils.Euler((0.0, 0.0, 0.0), 'XYZ')
        rig.show_in_front = True
        amt.show_names = True
        amt.display_type = 'STICK'
#        amt.display_type = 'BBONE'

        # Link object to scene

        bpy.data.collections['movement'].objects.link(rig)
        bpy.context.view_layer.objects.active = rig
        bpy.context.view_layer.update()

        # Edit
        bpy.ops.object.editmode_toggle()

        # Construction Linkage
        aa[2][1] = amt.edit_bones.new('a2a1')
        aa[2][1].head = a[2]
        aa[2][1].tail = a[1]
        
        ab[1][1] = amt.edit_bones.new('a1b1')
        ab[1][1].head = a[1]
        ab[1][1].tail = b[1]
        ab[1][1].parent = aa[2][1]
 
        by[1][1] = amt.edit_bones.new('b1y1')
        by[1][1].head = b[1]
        by[1][1].tail = y[1]
        by[1][1].parent = ab[1][1]
        by[1][1].use_inherit_rotation = False

        ya[1][2] = amt.edit_bones.new('y1a2')
        ya[1][2].head = y[1]
        ya[1][2].tail = a[2]
        ya[1][2].parent = by[1][1]

        ao[2][1] = amt.edit_bones.new('a2o1')
        ao[2][1].head = a[2]
        ao[2][1].tail = o[1]
        ao[2][1].parent = ya[1][2]

        ob[1][2] = amt.edit_bones.new('o1b2')
        ob[1][2].head = o[1]
        ob[1][2].tail = b[2]
        ob[1][2].parent = ao[2][1]
        
        yy[1][2] = amt.edit_bones.new('y1y2')
        yy[1][2].head = y[1]
        yy[1][2].tail = y[2]
        yy[1][2].parent = by[1][1]

        for j in range(2, J - 1):

            by[j][j] = amt.edit_bones.new('b'+ str(j) + 'y'+ str(j))
            by[j][j].head = b[j]
            by[j][j].tail = y[j]
            by[j][j].parent = ob[j-1][j]

            yo[j][j] = amt.edit_bones.new('y'+ str(j) + 'o'+ str(j))
            yo[j][j].head = y[j]
            yo[j][j].tail = o[j]
            yo[j][j].parent = yy[j-1][j]

            yy[j][j+1] = amt.edit_bones.new('y'+ str(j) + 'y'+ str(j+1))
            yy[j][j+1].head = y[j]
            yy[j][j+1].tail = y[j+1]
            yy[j][j+1].parent = by[j][j]

            if j < (J-2):
                ob[j][j+1] = amt.edit_bones.new('o'+ str(j) + 'b'+ str(j+1))
                ob[j][j+1].head = o[j]
                ob[j][j+1].tail = b[j+1]
                ob[j][j+1].parent = yo[j][j]

        # all bones select

        # Bone constraints. Armature must be in pose mode.
        bpy.ops.object.mode_set(mode='POSE')

        bpy.ops.pose.select_all(action="SELECT")

        # Edit
        bpy.ops.object.editmode_toggle()

        if helicity == 'right':
            bpy.ops.armature.calculate_roll(type='GLOBAL_POS_Z')
        else:
            bpy.ops.armature.calculate_roll(type='GLOBAL_NEG_Z')
 
        # IK constraint
        cns = rig.pose.bones['y1a2'].constraints.new('IK')
        cns.name = 'Ik'
        cns.target = rig
        cns.subtarget = 'a2a1'
        cns.chain_count = 2
        cns.use_stretch = False

        for j in range(2, J - 1):
            cns = rig.pose.bones['b'+str(j) +'y'+str(j)].constraints.new('IK')
            cns.name = 'Ik'
            cns.target = rig
            cns.subtarget = 'y'+str(j)+'o'+str(j)
            cns.iterations = 500
            cns.chain_count = 2
            cns.use_stretch = False

        bpy.ops.object.mode_set(mode='OBJECT')
        

    def configRotation(self, rig, interval, frame_start, frame_end, start, end):

        # Bone constraints. Armature must be in pose mode.
        bpy.ops.object.mode_set(mode='POSE')

        # key insert 
        keyframe_insert_interval = interval

        rig.pose.bones["a1b1"].rotation_mode = 'XYZ'
        rig.pose.bones["a1b1"].rotation_euler.z = math.radians(start) 
        rig.pose.bones["a1b1"].keyframe_insert(data_path="rotation_euler",frame=frame_start)

        rig.pose.bones["a1b1"].rotation_mode = 'XYZ'
        rig.pose.bones["a1b1"].rotation_euler.z = math.radians(end)
        rig.pose.bones["a1b1"].keyframe_insert(data_path="rotation_euler",frame=frame_end)

        for curve in bpy.context.active_object.animation_data.action.fcurves:
            cycles = curve.modifiers.new(type='CYCLES')
            cycles.mode_before = 'REPEAT_OFFSET'
            cycles.mode_after = 'REPEAT_OFFSET'

            for keyframe in curve.keyframe_points:
                keyframe.interpolation = 'LINEAR'

        bpy.ops.object.mode_set(mode='OBJECT')


    def configLink(self, A, J, helicity, rig, move, part):

        bpy.ops.object.mode_set(mode='OBJECT')
    
        Q = (0.18648+0.146446)*A
    #   Z = -Q*2
        Z = 0.0

        obj_joint = bpy.data.objects["joint.gold.000"].copy()
        obj_joint.location = (0.0, 0.0, -Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2a1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.silver.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1a2.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.copper.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2o1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.blue.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a1b1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)


        for n in range(1, J - 1):

            if n <= (J-2):

                # Pattern 2 of by
                obj_joint = bpy.data.objects["joint.green.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "b"+str(n)+"y"+str(n)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yy
                obj_joint = bpy.data.objects["joint.gold.00"+str(1 + (n+1) % 2)].copy()
                obj_joint.location = (0.0, 0.0, +Q*(1 - (n % 2))*2+Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n)+"y"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)


            if n <= (J-3):

                # Pattern 1 of ob
                obj_joint = bpy.data.objects["joint.blue.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q*2 + Q*(n % 2)*6 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "o"+str(n)+"b"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yo
                obj_joint = bpy.data.objects["joint.copper.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n+1)+"o"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)


        for ob in data.collections['link'].objects:
            if "mesh" in ob.name:
                ob.select_set(state = True, view_layer = None)

        bpy.ops.object.make_single_user(type='SELECTED_OBJECTS', object=True, obdata=True, material=True, animation=True)
        bpy.context.scene.cursor.location = (0.0, 0.0, 0.0)
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')


    def constructLink(self, A, J, helicity, rig, move, part):

        # Move and rotate the tip bone in pose mode
        bpy.context.view_layer.objects.active = rig 

        Y = 1.1838*A

        for n in rig.pose.bones:
            if n.name != "o" + str(J-2) + "b" + str(J-1):
                # we can get the object from the pose bone
                obj = n.id_data
                matrix_final = obj.matrix_world @ n.matrix

                # Create armature and object
                lnk = bpy.data.armatures.new(n.name[:len(n.name)]+'.data.' + helicity)
                lnk_rig = bpy.data.objects.new(n.name[:len(n.name)]+'.link.' + helicity, lnk)
                lnk_rig.location = mathutils.Euler((0.0, 0.0, 0.0), 'XYZ')

                # rig.show_in_front = True
                lnk.show_names = True
                lnk.display_type = 'STICK'

                bpy.data.collections['link'].objects.link(lnk_rig)
                bpy.context.view_layer.objects.active = lnk_rig
                bpy.context.view_layer.update()

                # Create bones

                # mode='EDIT'
                bpy.ops.object.editmode_toggle()
    
                link = lnk.edit_bones.new(n.name[:len(n.name)])
                link.head = (0.0, 0.0, 0.0)
                link.tail = (0.0, Y, 0.0)

                link_head = lnk.edit_bones.new('head')
                link_head.head = (0.0, 0.0, 0.1)
                link_head.tail = (0.0, 0.0, 0.0)
                link_head.parent = link
                link_head.use_inherit_scale = False

                link_tail = lnk.edit_bones.new('tail')
                link_tail.head = (0.0, Y, 0.0)
                link_tail.tail = (0.0, Y, -0.1)
                link_tail.parent = link
                link_tail.use_inherit_scale = False

                bpy.ops.object.mode_set(mode='OBJECT')

                ob = bpy.data.objects[n.name[:len(n.name)]+'.mesh.' + move + '.' + part +'.' + helicity]
                ob.location = mathutils.Euler((0.0, 0.0, 0.0), 'XYZ')
    
                # Give mesh object an armature modifier, using vertex groups but
                # not envelopes
                mod = ob.modifiers.new('MyRigModif', 'ARMATURE')
                mod.object = lnk_rig
                mod.use_bone_envelopes = False
                mod.use_vertex_groups = True

                # Bone constraints. Armature must be in pose mode.
                bpy.ops.object.mode_set(mode='POSE')
 
                # Copy rotation constraints Base -> Tip
                pBase = lnk_rig.pose.bones[n.name[:len(n.name)]]
                cns = pBase.constraints.new('COPY_LOCATION')
                cns.name = 'Copy_Location'
                cns.target = rig
                cns.subtarget = n.name[:len(n.name)]
                cns.owner_space = 'WORLD'
                cns.target_space = 'WORLD'

                # Copy rotation constraints Base -> Tip
                pBase = lnk_rig.pose.bones[n.name[:len(n.name)]]
                cns = pBase.constraints.new('COPY_ROTATION')
                cns.name = 'Copy_Rotation'
                cns.target = rig
                cns.subtarget = n.name[:len(n.name)]
                cns.owner_space = 'WORLD'
                cns.target_space = 'WORLD'

                # StretchTo constraint Mid -> Tip with influence 0.5
                cns1 = pBase.constraints.new('STRETCH_TO')
                cns1.name = 'Stretch'
                cns1.target = rig
                cns1.subtarget = n.name[:len(n.name)]
                cns1.head_tail = 1
                cns1.rest_length = Y
                cns1.influence = 1
                cns1.keep_axis = 'PLANE_Z'
                cns1.volume = 'NO_VOLUME'

                bpy.ops.object.mode_set(mode='OBJECT')

        
class Ankle(Formula):

    J = 3 #joint number

    # Overriding
    def __init__(self, P, A, move, part, helicity, start, end, 
        disciple_loc, disciple_rot, disciple):

        global interval
        global frame_start
        global frame_end

        self.interval = interval
        self.frame_start = frame_start
        self.frame_end = frame_end

        # pivot factor
        self.P = P

        # scale factor
        self.A = A 

        # name
        self.move = move

        # element
        self.part = part

        # element helicity
        self.helicity = helicity

        self.start = start
        self.end = end

        # disciple position
        self.disciple_loc = disciple_loc
        self.disciple_rot = disciple_rot

        # disciple
        self.disciple = disciple

        # Create armature and object
        self.amt = bpy.data.armatures.new(move + '.' + part + '.' + helicity + '.data')
        self.rig = bpy.data.objects.new(move + '.' + part + '.' + helicity, self.amt)

        # Joints
        self.a = [0 for i in range(self.J)] # Joint α
        self.b = [0 for i in range(self.J)] # Joint β
        self.y = [0 for i in range(self.J)] # Joint γ
        self.o = [0 for i in range(self.J)] # Joint δ

        # Configuration Movement
        self.configMovement(self.P, self.A, self.J, self.a, self.b, self.y, self.o)

        # Construction Movement
        self.constructMovement(self.J, self.helicity, self.amt, self.rig, self.a, self.b, self.y, self.o)

        # Parent set disciple to master        
        self.setParent(self.helicity, self.move, self.rig, 
            self.disciple_loc, self.disciple_rot, self.disciple)

        # Construction Rotation
        self.configRotation(self.rig, self.interval, self.frame_start, self.frame_end, self.start, self.end)

        # Configuration Linkage
        self.configLink(self.A*0.2, self.J, self.helicity, self.rig, self.move, self.part)

        # Construction Linkage
        self.constructLink(self.A*0.2, self.J, self.helicity, self.rig, self.move, self.part)

    # Overriding Configuration Movement
    def configMovement(self, P, A, J, a, b, y, o):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D

        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])
        
        y[2] = mathutils.Euler((-A, -(0.040937/0.083044)*A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        o[1] = mathutils.Euler(((-0.183248/0.083044)*A, -A, 0.0), 'XYZ')
        print ("o1 =", o[1])

    def constructMovement(self, J, helicity, amt, rig, a, b, y, o):

        # Linkages
        aa = [[0 for i in range(4)] for j in range(4)] # Link α(i) - α(j)
        ab = [[0 for i in range(4)] for j in range(4)] # Link α(i) - β(j)
        ya = [[0 for i in range(4)] for j in range(4)] # Link γ(i) - α(j)
        yy = [[0 for i in range(self.J)] for j in range(self.J)] # Link γ(i) - γ(j)
        by = [[0 for i in range(self.J)] for j in range(self.J)] # Link β(i) - γ(j)
        yo = [[0 for i in range(self.J)] for j in range(self.J)] # Link γ(i) - δ(j)

        rig.location = mathutils.Euler((0.0, 0.0, 0.0), 'XYZ')
        rig.show_in_front = True
        amt.show_names = True
        amt.display_type = 'STICK'
#        amt.display_type = 'BBONE'

        # Link object to scene

        bpy.data.collections['movement'].objects.link(rig)
        bpy.context.view_layer.objects.active = rig
        bpy.context.view_layer.update()

        # Edit
        bpy.ops.object.editmode_toggle()

        # Construction Linkage
        aa[2][1] = amt.edit_bones.new('a2a1')
        aa[2][1].head = a[2]
        aa[2][1].tail = a[1]
        
        ab[1][1] = amt.edit_bones.new('a1b1')
        ab[1][1].head = a[1]
        ab[1][1].tail = b[1]
        ab[1][1].parent = aa[2][1]
 
        by[1][1] = amt.edit_bones.new('b1y1')
        by[1][1].head = b[1]
        by[1][1].tail = y[1]
        by[1][1].parent = ab[1][1]
        by[1][1].use_inherit_rotation = False

        ya[1][2] = amt.edit_bones.new('y1a2')
        ya[1][2].head = y[1]
        ya[1][2].tail = a[2]
        ya[1][2].parent = by[1][1]

        yo[1][1] = amt.edit_bones.new('y1o1')
        yo[1][1].head = y[1]
        yo[1][1].tail = o[1]
        yo[1][1].parent = ya[1][2]
   
        yy[1][2] = amt.edit_bones.new('y1y2')
        yy[1][2].head = y[1]
        yy[1][2].tail = y[2]
        yy[1][2].parent = by[1][1]

        # all bones select

        # Bone constraints. Armature must be in pose mode.
        bpy.ops.object.mode_set(mode='POSE')

        bpy.ops.pose.select_all(action="SELECT")

        # Edit
        bpy.ops.object.editmode_toggle()

        if helicity == 'right':
            bpy.ops.armature.calculate_roll(type='GLOBAL_POS_Z')
        else:
            bpy.ops.armature.calculate_roll(type='GLOBAL_NEG_Z')
 
        # IK constraint
        cns = rig.pose.bones['y1a2'].constraints.new('IK')
        cns.name = 'Ik'
        cns.target = rig
        cns.subtarget = 'a2a1'
        cns.chain_count = 2
        cns.use_stretch = False

        bpy.ops.object.mode_set(mode='OBJECT')

    # Parent set disciple to master        
    def setParent(self, helicity, move, rig, disciple_loc, disciple_rot, disciple):

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.context.scene.frame_current = 0

        bpy.ops.object.select_all(action='DESELECT')
        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig

        bpy.ops.object.editmode_toggle()

        parent_bone = 'y1o1' # choose the bone name which you want to be the parent

        rig.data.edit_bones.active = rig.data.edit_bones[parent_bone]

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        disciple.rig.select_set(state=True)

        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig    #the active object will be the parent of all selected object

        bpy.ops.object.parent_set(type='BONE', keep_transform=True)

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        # disciple position
        disciple.rig.location.x += disciple_loc[0]
        disciple.rig.location.y += disciple_loc[1]
        disciple.rig.location.z += disciple_loc[2]

        disciple.rig.rotation_euler = disciple_rot

    def configLink(self, A, J, helicity, rig, move, part):

        bpy.ops.object.mode_set(mode='OBJECT')
    
        Q = (0.18648+0.146446)*A
    #   Z = -Q*2
        Z = 0.0

        obj_joint = bpy.data.objects["joint.gold.ankle.a2a1"].copy()
        obj_joint.location = (0.0, 0.0, -Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2a1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.silver.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1a2.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.copper.y1o1"].copy()
        obj_joint.location = (0.0, 0.0, +Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1o1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.blue.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a1b1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        n = 1

        # Pattern 2 of by
        obj_joint = bpy.data.objects["joint.green.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "b"+str(n)+"y"+str(n)+".mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        # Pattern 2 of yy
        obj_joint = bpy.data.objects["joint.gold.00"+str(1 + (n+1) % 2)].copy()
        obj_joint.location = (0.0, 0.0, +Q*(1 - (n % 2))*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y"+str(n)+"y"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        for ob in data.collections['link'].objects:
            if "mesh" in ob.name:
                ob.select_set(state = True, view_layer = None)

        bpy.ops.object.make_single_user(type='SELECTED_OBJECTS', object=True, obdata=True, material=True, animation=True)
        bpy.context.scene.cursor.location = (0.0, 0.0, 0.0)
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')
        

class ForeLeg(Formula):

    J = 6 #joint number

    # Overriding
    def __init__(self, P, A, move, part, helicity, start, end):

        global interval
        global frame_start
        global frame_end

        self.interval = interval
        self.frame_start = frame_start
        self.frame_end = frame_end

        # pivot factor
        self.P = P

        # scale factor
        self.A = A 

        # name
        self.move = move

        # element
        self.part = part

        # element helicity
        self.helicity = helicity

        self.start = start
        self.end = end

        # Create armature and object
        self.amt = bpy.data.armatures.new(move + '.' + part + '.' + helicity + '.data')
        self.rig = bpy.data.objects.new(move + '.' + part + '.' + helicity, self.amt)

        # Joints
        self.a = [0 for i in range(4)] # Joint α
        self.b = [0 for i in range(self.J)] # Joint β
        self.y = [0 for i in range(self.J)] # Joint γ
        self.o = [0 for i in range(self.J)] # Joint δ

        # Configuration Movement
        self.configMovement(self.P, self.A, self.J, self.a, self.b, self.y, self.o)

        # Construction Movement
        self.constructMovement(self.J, self.helicity, self.amt, self.rig, self.a, self.b, self.y, self.o)

        # Construction Rotation
        self.configRotation(self.rig, self.interval, self.frame_start, self.frame_end, self.start, self.end)

        # Configuration Linkage
        self.configLink(self.A*0.6, self.J, self.helicity, self.rig, self.move, self.part)

        # Construction Linkage
        self.constructLink(self.A*0.6, self.J, self.helicity, self.rig, self.move, self.part)

    # Overriding Configuration Movement
    def configMovement(self, P, A, J, a, b, y, o):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        o[1] = mathutils.Euler((A, A, 0.0), 'XYZ')
        print ("o1 =", o[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D

        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])

        b[2] = mathutils.Euler(((1.13339/0.052145)*A, (-1.0715/0.052145)*A, 0.0), 'XYZ')
        print ("b2 =", b[2])

        b[3] = mathutils.Euler(((1.13624/0.052145)*A, (-1.18043/0.052145)*A, 0.0), 'XYZ')
        print ("b3 =", b[3])
        
        b[4] = mathutils.Euler(((2.53145/0.052145)*A, (-0.511624/0.052145)*A, 0.0), 'XYZ')
        print ("b4 =", b[4])

        y[2] = mathutils.Euler(((1.02917/0.052145)*A, (-1.17583/0.052145)*A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        y[3] = mathutils.Euler(((1.16068/0.052145)*A, (-1.11813/0.052145)*A, 0.0), 'XYZ')
        print ("y3 =", y[3])

        o[2] = mathutils.Euler(((1.00991/0.052145)*A, (-1.13277/0.052145)*A, 0.0), 'XYZ')
        print ("o2 =", o[2])
        
        o[3] = mathutils.Euler(((1.03682/0.052145)*A, (-1.12083/0.052145)*A, 0.0), 'XYZ')
        print ("o3 =", o[3])
       
        o[4] = mathutils.Euler(((2.37473/0.052145)*A, (-0.378803/0.052145)*A, 0.0), 'XYZ')
        print ("o4 =", o[4])
        
        y[4] = mathutils.Euler(((2.39639/0.052145)*A, (-0.415664/0.052145)*A, 0.0), 'XYZ')
        print ("y4 =", y[4])
        
        y[5] = mathutils.Euler(((2.4675/0.052145)*A, (-0.373585/0.052145)*A, 0.0), 'XYZ')
        print ("y5 =", y[5])

        
    def configLink(self, A, J, helicity, rig, move, part):

        bpy.ops.object.mode_set(mode='OBJECT')
    
        Q = (0.18648+0.146446)*A
    #   Z = -Q*2
        Z = 0.0

        obj_joint = bpy.data.objects["joint.gold.arm.a2a1"].copy()
        obj_joint.location = (0.0, 0.0, -Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2a1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.silver.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1a2.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.copper.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2o1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.blue.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a1b1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)


        for n in range(1, J - 1):

            if n <= (J-2):

                # Pattern 2 of by
                obj_joint = bpy.data.objects["joint.green.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "b"+str(n)+"y"+str(n)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yy
                obj_joint = bpy.data.objects["joint.gold.00"+str(1 + (n+1) % 2)].copy()
                obj_joint.location = (0.0, 0.0, +Q*(1 - (n % 2))*2+Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n)+"y"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)


            if n <= (J-3):

                # Pattern 1 of ob
                if n == 3:
                    obj_joint = bpy.data.objects["joint.blue.o3b4.arm"].copy()
                else:
                    obj_joint = bpy.data.objects["joint.blue.001"].copy()
                
                obj_joint.location = (0.0, 0.0, -Q*2 + Q*(n % 2)*6 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "o"+str(n)+"b"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yo
                obj_joint = bpy.data.objects["joint.copper.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n+1)+"o"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)


        for ob in data.collections['link'].objects:
            if "mesh" in ob.name:
                ob.select_set(state = True, view_layer = None)

        bpy.ops.object.make_single_user(type='SELECTED_OBJECTS', object=True, obdata=True, material=True, animation=True)
        bpy.context.scene.cursor.location = (0.0, 0.0, 0.0)
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')


class ForeWing(Formula):
    
    J = 6 #joint number
    
    # Overriding
    def __init__(self, P, A, move, part, helicity, start, end,
        disciple_loc, disciple_rot, disciple):

        global interval
        global frame_start
        global frame_end

        self.interval = interval
        self.frame_start = frame_start
        self.frame_end = frame_end

        # pivot factor
        self.P = P

        # scale factor
        self.A = A 

        # name
        self.move = move

        # element
        self.part = part

        # element helicity
        self.helicity = helicity

        self.start = start
        self.end = end
        
        self.disciple_loc = disciple_loc
        self.disciple_rot = disciple_rot
        self.disciple = disciple

        # Create armature and object
        self.amt = bpy.data.armatures.new(move + '.' + part + '.' + helicity + '.data')
        self.rig = bpy.data.objects.new(move + '.' + part + '.' + helicity, self.amt)

        # Joints
        self.a = [0 for i in range(4)] # Joint α
        self.b = [0 for i in range(self.J)] # Joint β
        self.y = [0 for i in range(self.J)] # Joint γ
        self.o = [0 for i in range(self.J)] # Joint δ
        self.w = [0 for i in range(self.J+1)] # Joint ω

        # Configuration Movement
        self.configMovement(self.P, self.A, self.J, self.helicity, self.a, self.b, self.y, self.o, self.w)

        # Construction Movement
        self.constructMovement(self.J, self.helicity, self.amt, self.rig, self.a, self.b, self.y, self.o, self.w)
 
        # Parent set disciple to master      
        self.setParent(self.helicity, self.move, self.rig,
                self.disciple_loc, self.disciple_rot, self.disciple)
 
        # Construction Rotation
        self.configRotation(self.rig, self.interval, self.frame_start, self.frame_end, self.start, self.end)

        # Configuration Linkage
        self.configLink(self.A * 0.9, self.J, self.helicity, self.rig, self.move, self.part)

        # Construction Linkage
        self.constructLink(self.A * 0.9, self.J, self.helicity, self.rig, self.move, self.part)
    
    # Overriding Configuration Movement
    def configMovement(self, P, A, J, helicity, a, b, y, o, w):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        o[1] = mathutils.Euler((A, A, 0.0), 'XYZ')
        print ("o1 =", o[1])

        B = A * 2 * sqrt (2)

        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])

        y[2] = mathutils.Euler((1.404781*A, -3.404781*A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        y[3] = mathutils.Euler((-1*A, -5.809552*A, 0.0), 'XYZ')
        print ("y3 =", y[3])

        y[4] = mathutils.Euler((-1*A, -9.273811*A, 0.0), 'XYZ')
        print ("y4 =", y[4])

        b[2] = mathutils.Euler((3.404781*A, -1.404781*A, 0.0), 'XYZ')
        print ("b2 =", b[2])

        b[3] = mathutils.Euler((0.0/0.034172*A, -0.232561/0.034172*A, 0.0), 'XYZ')
        print ("b3 =", b[3])

        o[2] = mathutils.Euler((0.082042/0.034172*A, -0.150386/0.034172*A, 0.0), 'XYZ')
        print ("o2 =", o[2])
        
        o[3] = mathutils.Euler((-1.191309*A, -6.000875*A, 0.0), 'XYZ')
        print ("o3 =", o[3])
 
        if helicity == 'right':
            H = 1
        else:
            H = -1
            
        w[0] = mathutils.Euler((-A , y[4].y, -B * H), 'XYZ')
        print ("w0 =", w[0])
      
        w[1] = mathutils.Euler((-A , y[4].y, -B*2 * H), 'XYZ')
        print ("w1 =", w[1])

        w[2] = mathutils.Euler((-0.177343/0.034172*A, -0.312067/0.034172*A, -0.15494/0.034172*A * H), 'XYZ')
        w[3] = mathutils.Euler((-0.177343/0.034172*A, -0.312067/0.034172*A, -0.235315/0.034172*A * H), 'XYZ')
        print ("w2 =", w[2])
        print ("w3 =", w[3])
    
        w[4] = mathutils.Euler((-0.177343/0.034172*A, -0.312067/0.034172*A, -0.306712/0.034172* A * H), 'XYZ')
        print ("w4 =", w[4])
        w[5] = mathutils.Euler((-0.177343/0.034172*A, -0.312067/0.034172*A, -0.590215/0.034172* A * H), 'XYZ')
        print ("w5 =", w[5])

    def constructMovement(self, J, helicity, amt, rig, a, b, y, o, w):

        # Linkages
        aa = [[0 for i in range(4)] for j in range(4)] # Link α(i) - α(j)
        ab = [[0 for i in range(4)] for j in range(4)] # Link α(i) - β(j)
        ya = [[0 for i in range(4)] for j in range(4)] # Link γ(i) - α(j)
        ao = [[0 for i in range(4)] for j in range(4)] # Link α(i) - δ(j)
        ob = [[0 for i in range(self.J)] for j in range(self.J)] # Link δ(i) - β(j)
        yy = [[0 for i in range(self.J)] for j in range(self.J)] # Link γ(i) - γ(j)
        by = [[0 for i in range(self.J)] for j in range(self.J)] # Link β(i) - γ(j)
        yo = [[0 for i in range(self.J)] for j in range(self.J)] # Link γ(i) - δ(j)

        rig.location = mathutils.Euler((0.0, 0.0, 0.0), 'XYZ')
        rig.show_in_front = True
        amt.show_names = True
        amt.display_type = 'STICK'
#        amt.display_type = 'BBONE'

        # Link object to scene

        bpy.data.collections['movement'].objects.link(rig)
        bpy.context.view_layer.objects.active = rig
        bpy.context.view_layer.update()

        # Edit
        bpy.ops.object.editmode_toggle()

        # Construction Linkage
        aa[2][1] = amt.edit_bones.new('a2a1')
        aa[2][1].head = a[2]
        aa[2][1].tail = a[1]
        
        ab[1][1] = amt.edit_bones.new('a1b1')
        ab[1][1].head = a[1]
        ab[1][1].tail = b[1]
        ab[1][1].parent = aa[2][1]
 
        by[1][1] = amt.edit_bones.new('b1y1')
        by[1][1].head = b[1]
        by[1][1].tail = y[1]
        by[1][1].parent = ab[1][1]
        by[1][1].use_inherit_rotation = False

        ya[1][2] = amt.edit_bones.new('y1a2')
        ya[1][2].head = y[1]
        ya[1][2].tail = a[2]
        ya[1][2].parent = by[1][1]

        ao[2][1] = amt.edit_bones.new('a2o1')
        ao[2][1].head = a[2]
        ao[2][1].tail = o[1]
        ao[2][1].parent = ya[1][2]

        ob[1][2] = amt.edit_bones.new('o1b2')
        ob[1][2].head = o[1]
        ob[1][2].tail = b[2]
        ob[1][2].parent = ao[2][1]
        
        yy[1][2] = amt.edit_bones.new('y1y2')
        yy[1][2].head = y[1]
        yy[1][2].tail = y[2]
        yy[1][2].parent = by[1][1]

        for j in range(2, J - 2):

            by[j][j] = amt.edit_bones.new('b'+ str(j) + 'y'+ str(j))
            by[j][j].head = b[j]
            by[j][j].tail = y[j]
            by[j][j].parent = ob[j-1][j]

            yo[j][j] = amt.edit_bones.new('y'+ str(j) + 'o'+ str(j))
            yo[j][j].head = y[j]
            yo[j][j].tail = o[j]
            yo[j][j].parent = yy[j-1][j]

            yy[j][j+1] = amt.edit_bones.new('y'+ str(j) + 'y'+ str(j+1))
            yy[j][j+1].head = y[j]
            yy[j][j+1].tail = y[j+1]
            yy[j][j+1].parent = by[j][j]

            if j < (J-3):

                ob[j][j+1] = amt.edit_bones.new('o'+ str(j) + 'b'+ str(j+1))
                ob[j][j+1].head = o[j]
                ob[j][j+1].tail = b[j+1]
                ob[j][j+1].parent = yo[j][j]


        # y4 2 fulcrum vector
        y4_fulcrum = amt.edit_bones.new('y4_fulcrum')
        y4_fulcrum.head = y[4]
        y4_fulcrum.tail = w[0]
        y4_fulcrum.parent = yy[3][4]

        y4_fulcrum_tail = amt.edit_bones.new('y4_fulcrum.tail')
        y4_fulcrum_tail.head = w[0]
        y4_fulcrum_tail.tail = w[1]
        y4_fulcrum_tail.parent = y4_fulcrum


        # formula y3y4 ginbal_ring x-axis
        g_y3y4_x = amt.edit_bones.new('g_y3y4.x')
        g_y3y4_x.head = y[3]
        g_y3y4_x.tail = y[4]
        g_y3y4_x.parent = by[3][3]

        # formula y3y4 ginbal_ring z-axis
        g_y3y4_z = amt.edit_bones.new('g_y3y4.z')
        g_y3y4_z.head = y[4]
        g_y3y4_z.tail = w[0]
        g_y3y4_z.parent = g_y3y4_x

        # formula b4y4 ginbal_ring x-axis
#        g_b4y4_x = amt.edit_bones.new('g_b4y4.x')
#        g_b4y4_x.head = b[4]
#        g_b4y4_x.tail = y[4]
#        g_b4y4_x.parent = ob[3][4]

        # formula b4y4 ginbal_ring z-axis
#        g_b4y4_z = amt.edit_bones.new('g_b4y4.z')
#        g_b4y4_z.head = y[4]
#        g_b4y4_z.tail = w[0]
#        g_b4y4_z.parent = g_b4y4_x


        # fulcrum 2 y4
        fulcrum_y4 = amt.edit_bones.new('fulcrum_y4')
        fulcrum_y4.head = w[4]
        fulcrum_y4.tail = w[3]
        fulcrum_y4.parent = aa[2][1]

        # fulcrum y4 tail
        fulcrum_y4_tail = amt.edit_bones.new('fulcrum_y4.tail')
        fulcrum_y4_tail.head = w[3]
        fulcrum_y4_tail.tail = w[2]
        fulcrum_y4_tail.parent = fulcrum_y4
    

        # fulcrum gimbal 1 y-axis
        g_1_y = amt.edit_bones.new('g_1.y')
        g_1_y.head = mathutils.Euler((w[4].x, y[4].y + (0.312067-0.244966), w[4].z), 'XYZ')
        g_1_y.tail = w[4]
        g_1_y.parent = aa[2][1]

        # fulcrum gimbal 2 x-axis
        g_2_x = amt.edit_bones.new('g_2.x')
        g_2_x.head = w[4]
        g_2_x.tail = w[3]
        g_2_x.parent = g_1_y
    
    
        # wings gimbal 3 z-axis
        g_3_z = amt.edit_bones.new('g_3.z')
        g_3_z.head = w[4]
        g_3_z.tail = w[5]
        g_3_z.parent = g_2_x

#        # wings gimbal 4 z-axis
#        g_4_z = amt.edit_bones.new('g_4.z')
#        g_4_z.head = w[5]
#        g_4_z.tail = w[6]
#        g_4_z.parent = g_2_x

        # all bones select

        # Bone constraints. Armature must be in pose mode.
        bpy.ops.object.mode_set(mode='POSE')

        bpy.ops.pose.select_all(action="SELECT")

        # Edit
        bpy.ops.object.editmode_toggle()

        if helicity == 'right':
            bpy.ops.armature.calculate_roll(type='GLOBAL_POS_Z')
        else:
            bpy.ops.armature.calculate_roll(type='GLOBAL_NEG_Z')
 
        # IK constraint
        cns = rig.pose.bones['y1a2'].constraints.new('IK')
        cns.name = 'Ik'
        cns.target = rig
        cns.subtarget = 'a2a1'
        cns.chain_count = 2
        cns.use_stretch = False

        for j in range(2, J - 2):
            cns = rig.pose.bones['b'+str(j) +'y'+str(j)].constraints.new('IK')
            cns.name = 'Ik'
            cns.target = rig
            cns.subtarget = 'y'+str(j)+'o'+str(j)
            cns.iterations = 500
            cns.chain_count = 2
            cns.use_stretch = False

        # IK constraint y4 -> fulcrum
        cns = rig.pose.bones['y4_fulcrum'].constraints.new('DAMPED_TRACK')
        cns.name = 'Damped Track'
        cns.target = rig
        cns.subtarget = 'fulcrum_y4'
        cns.head_tail = 0

        # IK constraint fulcrum -> y4
        cns = rig.pose.bones['fulcrum_y4'].constraints.new('DAMPED_TRACK')
        cns.name = 'Damped Track'
        cns.target = rig
        cns.subtarget = 'y3y4'
        cns.head_tail = 1

        # IK constraint g_1.z - g_2.x - y4
        cns = rig.pose.bones['g_2.x'].constraints.new('IK')
        cns.name = 'Ik'
        cns.target = rig
        cns.subtarget = 'fulcrum_y4.tail'
        cns.pole_target = rig
        cns.pole_subtarget = 'fulcrum_y4'
        cns.chain_count = 2
        cns.use_stretch = False
        cns.pole_angle = math.radians(-90)

        # Copy rotation constraints
        cns = rig.pose.bones['g_3.z'].constraints.new('COPY_ROTATION')
        cns.name = 'Copy_Rotation'
        cns.target = rig
        cns.subtarget = 'g_y3y4.z'
        cns.owner_space = 'WORLD'
        cns.target_space = 'WORLD'

        # Copy rotation constraints
#        cns = rig.pose.bones['g_4.z'].constraints.new('COPY_ROTATION')
#        cns.name = 'Copy_Rotation'
#        cns.target = rig
#        cns.subtarget = 'g_b4y4.z'
#        cns.owner_space = 'WORLD'
#        cns.target_space = 'WORLD'

        # IK constraint
        cns = rig.pose.bones['g_y3y4.z'].constraints.new('IK')
        cns.name = 'Ik'
        cns.target = rig
        cns.subtarget = 'y4_fulcrum.tail'
        cns.pole_target = rig
        cns.pole_subtarget = 'y4_fulcrum'
        cns.chain_count = 2
        cns.use_stretch = False
        cns.pole_angle = math.radians(90)

        # IK constraint
#        cns = rig.pose.bones['g_b4y4.z'].constraints.new('IK')
#        cns.name = 'Ik'
#        cns.target = rig
#        cns.subtarget = 'y4_fulcrum.tail'
#        cns.pole_target = rig
#        cns.pole_subtarget = 'y4_fulcrum'
#        cns.chain_count = 2
#        cns.use_stretch = False
#        if helicity == 'right':
#            cns.pole_angle = math.radians(90)
#        else:
#            cns.pole_angle = math.radians(-90)

        bpy.ops.object.mode_set(mode='OBJECT')


    # Parent set disciple to master      
    def setParent(self, helicity, move, rig, 
            disciple_loc, disciple_rot, disciple ):

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.context.scene.frame_current = 0

        bpy.ops.object.select_all(action='DESELECT')
        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig

        bpy.ops.object.editmode_toggle()

        parent_bone = 'g_3.z' # choose the bone name which you want to be the parent

        rig.data.edit_bones.active = rig.data.edit_bones[parent_bone]

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        disciple.rig.select_set(state=True)

        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig    #the active object will be the parent of all selected object

        bpy.ops.object.parent_set(type='BONE', keep_transform=True)

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        # disciple position
        disciple.rig.location.x += disciple_loc[0]
        disciple.rig.location.y += disciple_loc[1]
        disciple.rig.location.z += disciple_loc[2]

        disciple.rig.rotation_euler = disciple_rot

    def configLink(self, A, J, helicity, rig, move, part):

        bpy.ops.object.mode_set(mode='OBJECT')
        
        obj_joint = bpy.data.objects["joint.cursor"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y4_fulcrum.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.cursor"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y4_fulcrum.tail.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.cursor"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "fulcrum_y4.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.cursor"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "fulcrum_y4.tail.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        Q = (0.18648+0.146446)*A
    #   Z = -Q*2
        Z = 0.0
#        Z = Q*17

#        obj_joint = bpy.data.objects["joint.gold.000"].copy()

        if helicity == 'right':
            obj_joint = bpy.data.objects["joint.gold.forewing.a2a1.L"].copy()
        else:
            obj_joint = bpy.data.objects["joint.gold.forewing.a2a1.R"].copy()

        obj_joint.location = (0.0, 0.0, -Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2a1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.silver.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1a2.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.copper.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2o1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.blue.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a1b1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)


        for n in range(1, J - 2):

            # Pattern 2 of by
            obj_joint = bpy.data.objects["joint.green.001"].copy()
            obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
            obj_joint.scale = (A, A, A)
            obj_joint.name = "b"+str(n)+"y"+str(n)+".mesh." + move + '.' + part +'.' + helicity
            bpy.data.collections['link'].objects.link(obj_joint)

            if n <= (J-4):

                # Pattern 1 of ob
                obj_joint = bpy.data.objects["joint.blue.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q*2 + Q*(n % 2)*6 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "o"+str(n)+"b"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yy
                obj_joint = bpy.data.objects["joint.gold.00"+str(1 + (n+1) % 2)].copy()
                obj_joint.location = (0.0, 0.0, +Q*(1 - (n % 2))*2+Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n)+"y"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

            if n <= (J-5):

                # Pattern 2 of yo
                obj_joint = bpy.data.objects["joint.copper.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n+1)+"o"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)
                

        obj_joint = bpy.data.objects["joint.gold.y3y4.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y3y4.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.gold.g_y3y4.x.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_y3y4.x.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.gold.g_y3y4.z.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_y3y4.z.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)
        
        obj_joint = bpy.data.objects["joint.green.g_1.y.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_1.y.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)
        
        obj_joint = bpy.data.objects["joint.blue.g_2.x.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_2.x.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)
        
        obj_joint = bpy.data.objects["joint.silver.g_3.z.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_3.z.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        for ob in data.collections['link'].objects:
            if "mesh" in ob.name:
                ob.select_set(state = True, view_layer = None)

        bpy.ops.object.make_single_user(type='SELECTED_OBJECTS', object=True, obdata=True, material=True, animation=True)
        bpy.context.scene.cursor.location = (0.0, 0.0, 0.0)
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')

    def constructLink(self, A, J, helicity, rig, move, part):

        # Move and rotate the tip bone in pose mode
        bpy.context.view_layer.objects.active = rig 

        Y = 1.1838*A

        for n in rig.pose.bones:

            if n.name != "y3o3":
#            if n.name != "o" + str(J-2) + "b" + str(J-1):
                # we can get the object from the pose bone
                obj = n.id_data
                matrix_final = obj.matrix_world @ n.matrix

                # Create armature and object
                lnk = bpy.data.armatures.new(n.name[:len(n.name)]+'.data.' + helicity)
                lnk_rig = bpy.data.objects.new(n.name[:len(n.name)]+'.link.' + helicity, lnk)
                lnk_rig.location = mathutils.Euler((0.0, 0.0, 0.0), 'XYZ')

                # rig.show_in_front = True
                lnk.show_names = True
                lnk.display_type = 'STICK'

                bpy.data.collections['link'].objects.link(lnk_rig)
                bpy.context.view_layer.objects.active = lnk_rig
                bpy.context.view_layer.update()

                # Create bones

                # mode='EDIT'
                bpy.ops.object.editmode_toggle()
    
                link = lnk.edit_bones.new(n.name[:len(n.name)])
                link.head = (0.0, 0.0, 0.0)
                link.tail = (0.0, Y, 0.0)

                link_head = lnk.edit_bones.new('head')
                link_head.head = (0.0, 0.0, 0.1)
                link_head.tail = (0.0, 0.0, 0.0)
                link_head.parent = link
                link_head.use_inherit_scale = False

                link_tail = lnk.edit_bones.new('tail')
                link_tail.head = (0.0, Y, 0.0)
                link_tail.tail = (0.0, Y, -0.1)
                link_tail.parent = link
                link_tail.use_inherit_scale = False

                bpy.ops.object.mode_set(mode='OBJECT')

                ob = bpy.data.objects[n.name[:len(n.name)]+'.mesh.' + move + '.' + part +'.' + helicity]
                ob.location = mathutils.Euler((0.0, 0.0, 0.0), 'XYZ')
    
                # Give mesh object an armature modifier, using vertex groups but
                # not envelopes
                mod = ob.modifiers.new('MyRigModif', 'ARMATURE')
                mod.object = lnk_rig
                mod.use_bone_envelopes = False
                mod.use_vertex_groups = True

                # Bone constraints. Armature must be in pose mode.
                bpy.ops.object.mode_set(mode='POSE')
 
                # Copy rotation constraints Base -> Tip
                pBase = lnk_rig.pose.bones[n.name[:len(n.name)]]
                cns = pBase.constraints.new('COPY_LOCATION')
                cns.name = 'Copy_Location'
                cns.target = rig
                cns.subtarget = n.name[:len(n.name)]
                cns.owner_space = 'WORLD'
                cns.target_space = 'WORLD'

                # Copy rotation constraints Base -> Tip
                pBase = lnk_rig.pose.bones[n.name[:len(n.name)]]
                cns = pBase.constraints.new('COPY_ROTATION')
                cns.name = 'Copy_Rotation'
                cns.target = rig
                cns.subtarget = n.name[:len(n.name)]
                cns.owner_space = 'WORLD'
                cns.target_space = 'WORLD'

                # StretchTo constraint Mid -> Tip with influence 0.5
                cns1 = pBase.constraints.new('STRETCH_TO')
                cns1.name = 'Stretch'
                cns1.target = rig
                cns1.subtarget = n.name[:len(n.name)]
                cns1.head_tail = 1
                cns1.rest_length = Y
                cns1.influence = 1
                cns1.keep_axis = 'PLANE_Z'
                cns1.volume = 'NO_VOLUME'

                bpy.ops.object.mode_set(mode='OBJECT')


class Head(Formula):

    J = 4 #joint number

    # Overriding
    def __init__(self, P, A, move, part, helicity, start, end):

        global interval
        global frame_start
        global frame_end

        self.interval = interval
        self.frame_start = frame_start
        self.frame_end = frame_end

        # pivot factor
        self.P = P

        # scale factor
        self.A = A 

        # name
        self.move = move

        # element
        self.part = part

        # element helicity
        self.helicity = helicity

        self.start = start
        self.end = end

        # Create armature and object
        self.amt = bpy.data.armatures.new(move + '.' + part + '.' + helicity + '.data')
        self.rig = bpy.data.objects.new(move + '.' + part + '.' + helicity, self.amt)

        # Joints
        self.a = [0 for i in range(self.J)] # Joint α
        self.b = [0 for i in range(self.J)] # Joint β
        self.y = [0 for i in range(self.J)] # Joint γ
        self.o = [0 for i in range(self.J)] # Joint δ

        # Configuration Movement
        self.configMovement(self.P, self.A, self.J, self.a, self.b, self.y, self.o)

        # Construction Movement
        self.constructMovement(self.J, self.helicity, self.amt, self.rig, self.a, self.b, self.y, self.o)

        # Construction Rotation
        self.configRotation(self.rig, self.interval, self.frame_start, self.frame_end, self.start, self.end)

        # Configuration Linkage
        self.configLink(self.A*0.2, self.J, self.helicity, self.rig, self.move, self.part)

        # Construction Linkage
        self.constructLink(self.A*0.2, self.J, self.helicity, self.rig, self.move, self.part)

    # Overriding Configuration Movement
    def configMovement(self, P, A, J, a, b, y, o):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D

        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])

        y[2] = mathutils.Euler((-A, (-0.324801/0.242908)*A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        o[1] = mathutils.Euler(((-0.795589/0.242908)*A, -A, 0.0), 'XYZ')
        print ("o1 =", o[1])
        
        b[2] = mathutils.Euler(((-0.795589/0.242908)*A, A, 0.0), 'XYZ')
        print ("b2 =", b[2])

    def constructMovement(self, J, helicity, amt, rig, a, b, y, o):

        # Linkages
        aa = [[0 for i in range(4)] for j in range(4)] # Link α(i) - α(j)
        ab = [[0 for i in range(4)] for j in range(4)] # Link α(i) - β(j)
        ya = [[0 for i in range(4)] for j in range(4)] # Link γ(i) - α(j)
#        ao = [[0 for i in range(4)] for j in range(4)] # Link α(i) - δ(j)
        ob = [[0 for i in range(self.J)] for j in range(self.J)] # Link δ(i) - β(j)
        yy = [[0 for i in range(self.J)] for j in range(self.J)] # Link γ(i) - γ(j)
        by = [[0 for i in range(self.J)] for j in range(self.J)] # Link β(i) - γ(j)
        yo = [[0 for i in range(self.J)] for j in range(self.J)] # Link γ(i) - δ(j)

        rig.location = mathutils.Euler((0.0, 0.0, 0.0), 'XYZ')
        rig.show_in_front = True
        amt.show_names = True
        amt.display_type = 'STICK'
#        amt.display_type = 'BBONE'

        # Link object to scene

        bpy.data.collections['movement'].objects.link(rig)
        bpy.context.view_layer.objects.active = rig
        bpy.context.view_layer.update()

        # Edit
        bpy.ops.object.editmode_toggle()

        # Construction Linkage
        aa[2][1] = amt.edit_bones.new('a2a1')
        aa[2][1].head = a[2]
        aa[2][1].tail = a[1]
        
        ab[1][1] = amt.edit_bones.new('a1b1')
        ab[1][1].head = a[1]
        ab[1][1].tail = b[1]
        ab[1][1].parent = aa[2][1]
 
        by[1][1] = amt.edit_bones.new('b1y1')
        by[1][1].head = b[1]
        by[1][1].tail = y[1]
        by[1][1].parent = ab[1][1]
        by[1][1].use_inherit_rotation = False

        ya[1][2] = amt.edit_bones.new('y1a2')
        ya[1][2].head = y[1]
        ya[1][2].tail = a[2]
        ya[1][2].parent = by[1][1]

        yo[1][1] = amt.edit_bones.new('y1o1')
        yo[1][1].head = y[1]
        yo[1][1].tail = o[1]
        yo[1][1].parent = ya[1][2]

        ob[1][2] = amt.edit_bones.new('o1b2')
        ob[1][2].head = o[1]
        ob[1][2].tail = b[2]
        ob[1][2].parent = yo[1][1]
   
        yy[1][2] = amt.edit_bones.new('y1y2')
        yy[1][2].head = y[1]
        yy[1][2].tail = y[2]
        yy[1][2].parent = by[1][1]

        # all bones select

        # Bone constraints. Armature must be in pose mode.
        bpy.ops.object.mode_set(mode='POSE')

        bpy.ops.pose.select_all(action="SELECT")

        # Edit
        bpy.ops.object.editmode_toggle()

        if helicity == 'right':
            bpy.ops.armature.calculate_roll(type='GLOBAL_POS_Z')
        else:
            bpy.ops.armature.calculate_roll(type='GLOBAL_NEG_Z')
 
        # IK constraint
        cns = rig.pose.bones['y1a2'].constraints.new('IK')
        cns.name = 'Ik'
        cns.target = rig
        cns.subtarget = 'a2a1'
        cns.chain_count = 2
        cns.use_stretch = False

        bpy.ops.object.mode_set(mode='OBJECT')

    def configLink(self, A, J, helicity, rig, move, part):

        bpy.ops.object.mode_set(mode='OBJECT')
    
        Q = (0.18648+0.146446)*A
    #   Z = -Q*2
        Z = 0.0

        obj_joint = bpy.data.objects["joint.gold.000"].copy()
        obj_joint.location = (0.0, 0.0, -Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2a1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.silver.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1a2.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.copper.y1o1"].copy()
        obj_joint.location = (0.0, 0.0, +Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1o1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.blue.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a1b1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        n = 1

        # Pattern 2 of by
        obj_joint = bpy.data.objects["joint.green.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "b"+str(n)+"y"+str(n)+".mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        # Pattern 2 of yy
        obj_joint = bpy.data.objects["joint.gold.00"+str(1 + (n+1) % 2)].copy()
        obj_joint.location = (0.0, 0.0, +Q*(1 - (n % 2))*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y"+str(n)+"y"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)
        
        # Pattern 1 of ob
#        obj_joint = bpy.data.objects["joint.blue.001"].copy()
#        obj_joint.location = (0.0, 0.0, -Q*2 + Q*(n % 2)*6 +Z)
        obj_joint = bpy.data.objects["joint.gold.A"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "o"+str(n)+"b"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        for ob in data.collections['link'].objects:
            if "mesh" in ob.name:
                ob.select_set(state = True, view_layer = None)

        bpy.ops.object.make_single_user(type='SELECTED_OBJECTS', object=True, obdata=True, material=True, animation=True)
        bpy.context.scene.cursor.location = (0.0, 0.0, 0.0)
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')


class Neck(Ankle):
    
    J = 3 #joint number

    # Overriding Configuration Movement
    def configMovement(self, P, A, J, a, b, y, o):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D

        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])
        
        y[2] = mathutils.Euler((-A, -(0.173028/0.351)*A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        o[1] = mathutils.Euler(((-0.77453/0.351)*A, -A, 0.0), 'XYZ')
        print ("o1 =", o[1])

    # Parent set disciple to master        
    def setParent(self, helicity, move, rig, disciple_loc, disciple_rot, disciple):

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.context.scene.frame_current = 0

        bpy.ops.object.select_all(action='DESELECT')
        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig

        bpy.ops.object.editmode_toggle()

        parent_bone = 'y1a2' # choose the bone name which you want to be the parent

        rig.data.edit_bones.active = rig.data.edit_bones[parent_bone]

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        disciple.rig.select_set(state=True)

        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig    #the active object will be the parent of all selected object

        bpy.ops.object.parent_set(type='BONE', keep_transform=True)

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        # disciple position
        disciple.rig.location.x += disciple_loc[0]
        disciple.rig.location.y += disciple_loc[1]
        disciple.rig.location.z += disciple_loc[2]

        disciple.rig.rotation_euler = disciple_rot

    def configLink(self, A, J, helicity, rig, move, part):

        bpy.ops.object.mode_set(mode='OBJECT')
    
        Q = (0.18648+0.146446)*A
    #   Z = -Q*2
        Z = 0.0

        obj_joint = bpy.data.objects["joint.gold.neck.a2a1"].copy()
        obj_joint.location = (0.0, 0.0, -Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2a1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.silver.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1a2.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.copper.y1o1"].copy()
        obj_joint.location = (0.0, 0.0, +Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1o1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.blue.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a1b1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        n = 1

        # Pattern 2 of by
        obj_joint = bpy.data.objects["joint.green.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "b"+str(n)+"y"+str(n)+".mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        # Pattern 2 of yy
        obj_joint = bpy.data.objects["joint.gold.00"+str(1 + (n+1) % 2)].copy()
        obj_joint.location = (0.0, 0.0, +Q*(1 - (n % 2))*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y"+str(n)+"y"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        for ob in data.collections['link'].objects:
            if "mesh" in ob.name:
                ob.select_set(state = True, view_layer = None)

        bpy.ops.object.make_single_user(type='SELECTED_OBJECTS', object=True, obdata=True, material=True, animation=True)
        bpy.context.scene.cursor.location = (0.0, 0.0, 0.0)
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')
        

class RightShoulder(Formula):

    J = 7 #joint number

    # Overriding
    def __init__(self, P, A, move, part, helicity, start, end, 
            disciple_loc, disciple_rot, disciple, disciple2_loc, disciple2_rot, disciple2):

        global interval
        global frame_start
        global frame_end

        self.interval = interval
        self.frame_start = frame_start
        self.frame_end = frame_end

        # pivot factor
        self.P = P

        # scale factor
        self.A = A 

        # name
        self.move = move

        # element
        self.part = part

        # element helicity
        self.helicity = helicity

        self.start = start
        self.end = end

        # disciple position
        self.disciple_loc = disciple_loc
        self.disciple_rot = disciple_rot

        # disciple
        self.disciple = disciple
        
        # disciple position
        self.disciple2_loc = disciple2_loc
        self.disciple2_rot = disciple2_rot

        # disciple
        self.disciple2 = disciple2

        # Create armature and object
        self.amt = bpy.data.armatures.new(move + '.' + part + '.' + helicity + '.data')
        self.rig = bpy.data.objects.new(move + '.' + part + '.' + helicity, self.amt)

        # Joints
        self.a = [0 for i in range(4)] # Joint α
        self.b = [0 for i in range(self.J)] # Joint β
        self.y = [0 for i in range(self.J)] # Joint γ
        self.o = [0 for i in range(self.J)] # Joint δ

        # Configuration Movement
        self.configMovement(self.P, self.A, self.J, self.a, self.b, self.y, self.o)

        # Construction Movement
        self.constructMovement(self.J, self.helicity, self.amt, self.rig, self.a, self.b, self.y, self.o)

        # Parent set disciple to master       
        self.setParent(self.helicity, self.move, self.rig, self.disciple_loc, self.disciple_rot,
            self.disciple, self.disciple2_loc, self.disciple2_rot, self.disciple2)

        # Construction Rotation
        self.configRotation(self.rig, self.interval, self.frame_start, self.frame_end, self.start, self.end)

        # Configuration Linkage
        self.configLink(self.A*0.5, self.J, self.helicity, self.rig, self.move, self.part)

        # Construction Linkage
        self.constructLink(self.A*0.5, self.J, self.helicity, self.rig, self.move, self.part)

    # Overriding Configuration Movement
    def configMovement(self, P, A, J, a, b, y, o):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        o[1] = mathutils.Euler((A, A, 0.0), 'XYZ')
        print ("o1 =", o[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D
        
        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])

        b[2] = mathutils.Euler(((A*3/0.070129)*A, (A/0.070129)*A, 0.0), 'XYZ')
        print ("b2 =", b[2])

        b[3] = mathutils.Euler(((0.222378/0.431828)*A, (-0.516001/0.431828)*A, 0.0), 'XYZ')
        print ("b3 =", b[3])

        b[4] = mathutils.Euler(((0.344001/0.431828)*A, (-0.344001/0.431828)*A, 0.0), 'XYZ')
        print ("b4 =", b[4])
        
        b[5] = mathutils.Euler(((-0.786222/0.431828)*A, (2.50622/0.431828)*A, 0.0), 'XYZ')
        print ("b5 =", b[5])

        y[2] = mathutils.Euler(((A/0.070129)*A, (-A/0.070129)*A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        y[3] = mathutils.Euler(((0.222378/0.431828)*A, (-0.637623/0.431828)*A, 0.0), 'XYZ')
        print ("y3 =", y[3])

        y[4] = mathutils.Euler(((A/0.070129)*A, (-A/0.070129)*A, 0.0), 'XYZ')
        print ("y4 =", y[4])

        y[5] = mathutils.Euler(((A/0.070129)*A, (2.50622/0.431828)*A, 0.0), 'XYZ')
        print ("y5 =", y[5])

        y[6] = mathutils.Euler(((A/0.070129)*A, (2.79985/0.431828)*A, 0.0), 'XYZ')
        print ("y6 =", y[6])

        o[2] = mathutils.Euler(((0.516001/0.431828)*A, (-0.516001/0.431828)*A, 0.0), 'XYZ')
        print ("o2 =", o[2])
        
        o[3] = mathutils.Euler(((0.344001/0.431828)*A, (-0.637623/0.431828)*A, 0.0), 'XYZ')
        print ("o3 =", o[3])
        
        o[4] = mathutils.Euler(((-0.786222/0.431828)*A, (-A/0.070129)*A, 0.0), 'XYZ')
        print ("o4 =", o[4])
        
        o[5] = mathutils.Euler(((0.308378/0.431828)*A, (2.50622/0.431828)*A, 0.0), 'XYZ')
        print ("o5 =", o[5])

    # Parent set disciple to master
    def setParent(self, helicity, move, rig, disciple_loc, disciple_rot, disciple, 
            disciple2_loc, disciple2_rot, disciple2):

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.context.scene.frame_current = 0

        bpy.ops.object.select_all(action='DESELECT')
        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig

        bpy.ops.object.editmode_toggle()

        parent_bone = 'y3y4' # choose the bone name which you want to be the parent

        rig.data.edit_bones.active = rig.data.edit_bones[parent_bone]

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        #disciple
        disciple.rig.select_set(state=True)

        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig    #the active object will be the parent of all selected object

        bpy.ops.object.parent_set(type='BONE', keep_transform=True)

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        # disciple position
        disciple.rig.location.x += disciple_loc[0]
        disciple.rig.location.y += disciple_loc[1]
        disciple.rig.location.z += disciple_loc[2]

        disciple.rig.rotation_euler = disciple_rot
        

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.context.scene.frame_current = 0

        bpy.ops.object.select_all(action='DESELECT')
        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig

        bpy.ops.object.editmode_toggle()

        parent_bone = 'b5y5' # choose the bone name which you want to be the parent

        rig.data.edit_bones.active = rig.data.edit_bones[parent_bone]

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        #disciple2
        disciple2.rig.select_set(state=True)

        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig    #the active object will be the parent of all selected object

        bpy.ops.object.parent_set(type='BONE', keep_transform=True)

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        # disciple2 position
        disciple2.rig.location.x += disciple2_loc[0]
        disciple2.rig.location.y += disciple2_loc[1]
        disciple2.rig.location.z += disciple2_loc[2]

        disciple2.rig.rotation_euler = disciple2_rot

    def configLink(self, A, J, helicity, rig, move, part):

        bpy.ops.object.mode_set(mode='OBJECT')
    
        Q = (0.18648+0.146446)*A
    #   Z = -Q*2
        Z = 0.0

        obj_joint = bpy.data.objects["joint.gold.000"].copy()
        obj_joint.location = (0.0, 0.0, -Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2a1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.silver.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1a2.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.copper.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2o1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.blue.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a1b1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)


        for n in range(1, J - 1):

            if n <= (J-2):

                # Pattern 2 of by
                obj_joint = bpy.data.objects["joint.green.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "b"+str(n)+"y"+str(n)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yy
                obj_joint = bpy.data.objects["joint.gold.00"+str(1 + (n+1) % 2)].copy()
                obj_joint.location = (0.0, 0.0, +Q*(1 - (n % 2))*2+Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n)+"y"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)


            if n <= (J-3):

                # Pattern 1 of ob
                obj_joint = bpy.data.objects["joint.blue.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q*2 + Q*(n % 2)*6 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "o"+str(n)+"b"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yo
                obj_joint = bpy.data.objects["joint.copper.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n+1)+"o"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)


        for ob in data.collections['link'].objects:
            if "mesh" in ob.name:
                ob.select_set(state = True, view_layer = None)

        bpy.ops.object.make_single_user(type='SELECTED_OBJECTS', object=True, obdata=True, material=True, animation=True)
        bpy.context.scene.cursor.location = (0.0, 0.0, 0.0)
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')


class LeftShoulder(RightShoulder):

    J = 7 #joint number

    # Overriding
    def __init__(self, P, A, move, part, helicity, start, end,
        disciple_loc, disciple_rot, disciple):

        global interval
        global frame_start
        global frame_end

        self.interval = interval
        self.frame_start = frame_start
        self.frame_end = frame_end

        # pivot factor
        self.P = P

        # scale factor
        self.A = A 

        # name
        self.move = move

        # element
        self.part = part

        # element helicity
        self.helicity = helicity

        self.start = start
        self.end = end

        # disciple position
        self.disciple_loc = disciple_loc
        self.disciple_rot = disciple_rot

        # disciple
        self.disciple = disciple

        # Create armature and object
        self.amt = bpy.data.armatures.new(move + '.' + part + '.' + helicity + '.data')
        self.rig = bpy.data.objects.new(move + '.' + part + '.' + helicity, self.amt)

        # Joints
        self.a = [0 for i in range(4)] # Joint α
        self.b = [0 for i in range(self.J)] # Joint β
        self.y = [0 for i in range(self.J)] # Joint γ
        self.o = [0 for i in range(self.J)] # Joint δ

        # Configuration Movement
        self.configMovement(self.P, self.A, self.J, self.a, self.b, self.y, self.o)

        # Construction Movement
        self.constructMovement(self.J, self.helicity, self.amt, self.rig, self.a, self.b, self.y, self.o)

        # Parent set disciple to master       
        self.setParent(self.helicity, self.move, self.rig, self.disciple_loc, self.disciple_rot, self.disciple)

        # Construction Rotation
        self.configRotation(self.rig, self.interval, self.frame_start, self.frame_end, self.start, self.end)

        # Configuration Linkage
        self.configLink(self.A*0.5, self.J, self.helicity, self.rig, self.move, self.part)

        # Construction Linkage
        self.constructLink(self.A*0.5, self.J, self.helicity, self.rig, self.move, self.part)

    def configMovement(self, P, A, J, a, b, y, o):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        o[1] = mathutils.Euler((A, A, 0.0), 'XYZ')
        print ("o1 =", o[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D
        
        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])

        b[2] = mathutils.Euler(((A*3/0.070129)*A, (A/0.070129)*A, 0.0), 'XYZ')
        print ("b2 =", b[2])

        b[3] = mathutils.Euler(((0.222378/0.431828)*A, (-0.516001/0.431828)*A, 0.0), 'XYZ')
        print ("b3 =", b[3])

        b[4] = mathutils.Euler(((0.344001/0.431828)*A, (-0.344001/0.431828)*A, 0.0), 'XYZ')
        print ("b4 =", b[4])
        
        b[5] = mathutils.Euler(((-0.786223/0.431828)*A, (-3.36622/0.431828)*A, 0.0), 'XYZ')
        print ("b5 =", b[5])

        y[2] = mathutils.Euler(((A/0.070129)*A, (-A/0.070129)*A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        y[3] = mathutils.Euler(((0.222378/0.431828)*A, (-0.637623/0.431828)*A, 0.0), 'XYZ')
        print ("y3 =", y[3])

        y[4] = mathutils.Euler(((A/0.070129)*A, (-A/0.070129)*A, 0.0), 'XYZ')
        print ("y4 =", y[4])

        y[5] = mathutils.Euler(((A/0.070129)*A, (-3.36622/0.431828)*A, 0.0), 'XYZ')
        print ("y5 =", y[5])

        y[6] = mathutils.Euler(((A/0.070129)*A, (-3.65985/0.431828)*A, 0.0), 'XYZ')
        print ("y6 =", y[6])

        o[2] = mathutils.Euler(((0.516001/0.431828)*A, (-0.516001/0.431828)*A, 0.0), 'XYZ')
        print ("o2 =", o[2])
        
        o[3] = mathutils.Euler(((0.344001/0.431828)*A, (-0.637623/0.431828)*A, 0.0), 'XYZ')
        print ("o3 =", o[3])
        
        o[4] = mathutils.Euler(((-0.786223/0.431828)*A, (-A/0.070129)*A, 0.0), 'XYZ')
        print ("o4 =", o[4])
        
        o[5] = mathutils.Euler(((0.308378/0.431828)*A, (-3.36622/0.431828)*A, 0.0), 'XYZ')
        print ("o5 =", o[5])

    # Parent set disciple to master
    def setParent(self, helicity, move, rig, disciple_loc, disciple_rot, disciple):

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.context.scene.frame_current = 0

        bpy.ops.object.select_all(action='DESELECT')
        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig

        bpy.ops.object.editmode_toggle()

        parent_bone = 'b5y5' # choose the bone name which you want to be the parent

        rig.data.edit_bones.active = rig.data.edit_bones[parent_bone]

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        #disciple
        disciple.rig.select_set(state=True)

        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig    #the active object will be the parent of all selected object

        bpy.ops.object.parent_set(type='BONE', keep_transform=True)

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        # disciple position
        disciple.rig.location.x += disciple_loc[0]
        disciple.rig.location.y += disciple_loc[1]
        disciple.rig.location.z += disciple_loc[2]

        disciple.rig.rotation_euler = disciple_rot
        

class Costa(Formula):

    J = 4 #joint number

    # Overriding
    def __init__(self, P, A, move, part, helicity, start, end, 
        disciple_loc, disciple_rot, disciple, disciple2):

        global interval
        global frame_start
        global frame_end

        self.interval = interval
        self.frame_start = frame_start
        self.frame_end = frame_end

        # pivot factor
        self.P = P

        # scale factor
        self.A = A 

        # name
        self.move = move

        # element
        self.part = part

        # element helicity
        self.helicity = helicity

        self.start = start
        self.end = end

        # disciple position
        self.disciple_loc = disciple_loc
        self.disciple_rot = disciple_rot

        # disciple
        self.disciple = disciple
        self.disciple2 = disciple2

        # Create armature and object
        self.amt = bpy.data.armatures.new(move + '.' + part + '.' + helicity + '.data')
        self.rig = bpy.data.objects.new(move + '.' + part + '.' + helicity, self.amt)

        # Joints
        self.a = [0 for i in range(self.J)] # Joint α
        self.b = [0 for i in range(self.J)] # Joint β
        self.y = [0 for i in range(self.J)] # Joint γ
        self.o = [0 for i in range(self.J)] # Joint δ

        # Configuration Movement
        self.configMovement(self.P, self.A, self.J, self.a, self.b, self.y, self.o)

        # Construction Movement
        self.constructMovement(self.J, self.helicity, self.amt, self.rig, self.a, self.b, self.y, self.o)

        # Parent set disciple to master       
        self.setParent(self.helicity, self.move, self.rig, 
            self.disciple_loc, self.disciple_rot, self.disciple, self.disciple2)

        # Construction Rotation
        self.configRotation(self.rig, self.interval, self.frame_start, self.frame_end, self.start, self.end)

        # Configuration Linkage
        self.configLink(self.A*0.2, self.J, self.helicity, self.rig, self.move, self.part)

        # Construction Linkage
        self.constructLink(self.A*0.2, self.J, self.helicity, self.rig, self.move, self.part)

    # Overriding Configuration Movement
    def configMovement(self, P, A, J, a, b, y, o):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D

        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])
        
        y[2] = mathutils.Euler((-A, (-0.581324/0.431828)*A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        o[1] = mathutils.Euler(((-3.59276/0.431828)*A, -A, 0.0), 'XYZ')
        print ("o1 =", o[1])
        
        b[2] = mathutils.Euler(((-3.59276/0.431828)*A, (-0.581324/0.431828)*A, 0.0), 'XYZ')
        print ("b2 =", b[2])

        o[2] = mathutils.Euler((-A, (-0.664808/0.431828)*A, 0.0), 'XYZ')
        print ("o2 =", o[2])

    def constructMovement(self, J, helicity, amt, rig, a, b, y, o):

        # Linkages
        aa = [[0 for i in range(4)] for j in range(4)] # Link α(i) - α(j)
        ab = [[0 for i in range(4)] for j in range(4)] # Link α(i) - β(j)
        ya = [[0 for i in range(4)] for j in range(4)] # Link γ(i) - α(j)
#        ao = [[0 for i in range(4)] for j in range(4)] # Link α(i) - δ(j)
        ob = [[0 for i in range(self.J)] for j in range(self.J)] # Link δ(i) - β(j)
        yy = [[0 for i in range(self.J)] for j in range(self.J)] # Link γ(i) - γ(j)
        by = [[0 for i in range(self.J)] for j in range(self.J)] # Link β(i) - γ(j)
        yo = [[0 for i in range(self.J)] for j in range(self.J)] # Link γ(i) - δ(j)

        rig.location = mathutils.Euler((0.0, 0.0, 0.0), 'XYZ')
        rig.show_in_front = True
        amt.show_names = True
        amt.display_type = 'STICK'
#        amt.display_type = 'BBONE'

        # Link object to scene

        bpy.data.collections['movement'].objects.link(rig)
        bpy.context.view_layer.objects.active = rig
        bpy.context.view_layer.update()

        # Edit
        bpy.ops.object.editmode_toggle()

        # Construction Linkage
        aa[2][1] = amt.edit_bones.new('a2a1')
        aa[2][1].head = a[2]
        aa[2][1].tail = a[1]
        
        ab[1][1] = amt.edit_bones.new('a1b1')
        ab[1][1].head = a[1]
        ab[1][1].tail = b[1]
        ab[1][1].parent = aa[2][1]
 
        by[1][1] = amt.edit_bones.new('b1y1')
        by[1][1].head = b[1]
        by[1][1].tail = y[1]
        by[1][1].parent = ab[1][1]
        by[1][1].use_inherit_rotation = False

        ya[1][2] = amt.edit_bones.new('y1a2')
        ya[1][2].head = y[1]
        ya[1][2].tail = a[2]
        ya[1][2].parent = by[1][1]

        yo[1][1] = amt.edit_bones.new('y1o1')
        yo[1][1].head = y[1]
        yo[1][1].tail = o[1]
        yo[1][1].parent = ya[1][2]

        ob[1][2] = amt.edit_bones.new('o1b2')
        ob[1][2].head = o[1]
        ob[1][2].tail = b[2]
        ob[1][2].parent = yo[1][1]
        
        yy[1][2] = amt.edit_bones.new('y1y2')
        yy[1][2].head = y[1]
        yy[1][2].tail = y[2]
        yy[1][2].parent = by[1][1]

        by[2][2] = amt.edit_bones.new('b'+ str(2) + 'y'+ str(2))
        by[2][2].head = b[2]
        by[2][2].tail = y[2]
        by[2][2].parent = ob[1][2]

        yo[2][2] = amt.edit_bones.new('y'+ str(2) + 'o'+ str(2))
        yo[2][2].head = y[2]
        yo[2][2].tail = o[2]
        yo[2][2].parent = yy[1][2]

        # all bones select

        # Bone constraints. Armature must be in pose mode.
        bpy.ops.object.mode_set(mode='POSE')

        bpy.ops.pose.select_all(action="SELECT")

        # Edit
        bpy.ops.object.editmode_toggle()

        if helicity == 'right':
            bpy.ops.armature.calculate_roll(type='GLOBAL_POS_Z')
        else:
            bpy.ops.armature.calculate_roll(type='GLOBAL_NEG_Z')
 
        # IK constraint
        cns = rig.pose.bones['y1a2'].constraints.new('IK')
        cns.name = 'Ik'
        cns.target = rig
        cns.subtarget = 'a2a1'
        cns.chain_count = 2
        cns.use_stretch = False

        cns = rig.pose.bones['b2y2'].constraints.new('IK')
        cns.name = 'Ik'
        cns.target = rig
        cns.subtarget = 'y2o2'
        cns.iterations = 500
        cns.chain_count = 2
        cns.use_stretch = False

        bpy.ops.object.mode_set(mode='OBJECT')

    # Parent set disciple to master        
    def setParent(self, helicity, move, rig, 
        disciple_loc, disciple_rot, disciple, disciple2):

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.context.scene.frame_current = 0

        bpy.ops.object.select_all(action='DESELECT')
        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig

        bpy.ops.object.editmode_toggle()

        parent_bone = 'y1o1' # choose the bone name which you want to be the parent

        rig.data.edit_bones.active = rig.data.edit_bones[parent_bone]

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        disciple.rig.select_set(state=True)
        disciple2.rig.select_set(state=True)

        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig    #the active object will be the parent of all selected object

        bpy.ops.object.parent_set(type='BONE', keep_transform=True)
                
        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        # disciple position
        disciple.rig.location.x += disciple_loc[0]
        disciple.rig.location.y += disciple_loc[1]
        disciple.rig.location.z += disciple_loc[2]

        disciple.rig.rotation_euler = disciple_rot

        # disciple2 position
        disciple2.rig.location.x += disciple_loc[0]
        disciple2.rig.location.y += disciple_loc[1]
        disciple2.rig.location.z += disciple_loc[2]

        disciple2.rig.rotation_euler = disciple_rot

    def configLink(self, A, J, helicity, rig, move, part):

        bpy.ops.object.mode_set(mode='OBJECT')
    
        Q = (0.18648+0.146446)*A
    #   Z = -Q*2
        Z = 0.0

        obj_joint = bpy.data.objects["joint.gold.000"].copy()
        obj_joint.location = (0.0, 0.0, -Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2a1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.silver.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1a2.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.copper.y1o1"].copy()
        obj_joint.location = (0.0, 0.0, +Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1o1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.blue.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a1b1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        n = 1

        # Pattern 2 of by
        obj_joint = bpy.data.objects["joint.green.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "b"+str(n)+"y"+str(n)+".mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        # Pattern 2 of yy
        obj_joint = bpy.data.objects["joint.gold.00"+str(1 + (n+1) % 2)].copy()
        obj_joint.location = (0.0, 0.0, +Q*(1 - (n % 2))*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y"+str(n)+"y"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        # Pattern 1 of ob
        obj_joint = bpy.data.objects["joint.blue.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q*2 + Q*(n % 2)*6 +Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "o"+str(n)+"b"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        # Pattern 2 of yo
        obj_joint = bpy.data.objects["joint.copper.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y"+str(n+1)+"o"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        n = 2
        
        # Pattern 2 of by
        obj_joint = bpy.data.objects["joint.green.b2y2"].copy()
        obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "b"+str(n)+"y"+str(n)+".mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        for ob in data.collections['link'].objects:
            if "mesh" in ob.name:
                ob.select_set(state = True, view_layer = None)

        bpy.ops.object.make_single_user(type='SELECTED_OBJECTS', object=True, obdata=True, material=True, animation=True)
        bpy.context.scene.cursor.location = (0.0, 0.0, 0.0)
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')


class Tarsus(Formula):

    J = 4 #joint number

    # Overriding
    def __init__(self, P, A, move, part, helicity, start, end):

        global interval
        global frame_start
        global frame_end

        self.interval = interval
        self.frame_start = frame_start
        self.frame_end = frame_end

        # pivot factor
        self.P = P

        # scale factor
        self.A = A 

        # name
        self.move = move

        # element
        self.part = part

        # element helicity
        self.helicity = helicity

        self.start = start
        self.end = end

        # Create armature and object
        self.amt = bpy.data.armatures.new(move + '.' + part + '.' + helicity + '.data')
        self.rig = bpy.data.objects.new(move + '.' + part + '.' + helicity, self.amt)

        # Joints
        self.a = [0 for i in range(4)] # Joint α
        self.b = [0 for i in range(self.J)] # Joint β
        self.y = [0 for i in range(self.J)] # Joint γ
        self.o = [0 for i in range(self.J)] # Joint δ

        # Configuration Movement
        self.configMovement(self.P, self.A, self.J, self.a, self.b, self.y, self.o)

        # Construction Movement
        self.constructMovement(self.J, self.helicity, self.amt, self.rig, self.a, self.b, self.y, self.o)

        # Construction Rotation
        self.configRotation(self.rig, self.interval, self.frame_start, self.frame_end, self.start, self.end)

        # Configuration Linkage
        self.configLink(1.25*self.A*0.8, self.J, self.helicity, self.rig, self.move, self.part)

        # Construction Linkage
        self.constructLink(1.25*self.A*0.8, self.J, self.helicity, self.rig, self.move, self.part)

    # Overriding Configuration Movement
    def configMovement(self, P, A, J, a, b, y, o):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        o[1] = mathutils.Euler((A, A, 0.0), 'XYZ')
        print ("o1 =", o[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D

        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])

        b[2] = mathutils.Euler(((0.444619/0.031153)*A, (-0.26687/0.031153)*A, 0.0), 'XYZ')
        print ("b2 =", b[2])

        y[2] = mathutils.Euler(((0.41547/0.031153)*A, (-0.316385/0.031153)*A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        y[3] = mathutils.Euler(((0.84594/0.031153)*A, (-0.598465/0.031153)*A, 0.0), 'XYZ')
        print ("y3 =", y[3])

        o[2] = mathutils.Euler(((0.468756/0.031153)*A, (-0.231988/0.031153)*A, 0.0), 'XYZ')
        print ("o2 =", o[2])

        
    def configLink(self, A, J, helicity, rig, move, part):

        bpy.ops.object.mode_set(mode='OBJECT')
    
        Q = (0.18648+0.146446)*A
    #   Z = -Q*2
        Z = 0.0

        obj_joint = bpy.data.objects["joint.gold.arm.a2a1"].copy()
        obj_joint.location = (0.0, 0.0, -Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2a1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.silver.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1a2.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.copper.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2o1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.blue.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a1b1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)


        for n in range(1, J - 1):

            if n <= (J-2):

                # Pattern 2 of by
                obj_joint = bpy.data.objects["joint.green.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "b"+str(n)+"y"+str(n)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yy
                obj_joint = bpy.data.objects["joint.gold.00"+str(1 + (n+1) % 2)].copy()
                obj_joint.location = (0.0, 0.0, +Q*(1 - (n % 2))*2+Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n)+"y"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)


            if n <= (J-3):

                # Pattern 1 of ob
                if n == 3:
                    obj_joint = bpy.data.objects["joint.blue.o3b4.arm"].copy()
                else:
                    obj_joint = bpy.data.objects["joint.blue.001"].copy()
                
                obj_joint.location = (0.0, 0.0, -Q*2 + Q*(n % 2)*6 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "o"+str(n)+"b"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yo
                obj_joint = bpy.data.objects["joint.copper.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n+1)+"o"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)


        for ob in data.collections['link'].objects:
            if "mesh" in ob.name:
                ob.select_set(state = True, view_layer = None)

        bpy.ops.object.make_single_user(type='SELECTED_OBJECTS', object=True, obdata=True, material=True, animation=True)
        bpy.context.scene.cursor.location = (0.0, 0.0, 0.0)
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')
        
        
class MiddleLeg(ForeLeg):

    J = 6 #joint number

    # Overriding
    def __init__(self, P, A, move, part, helicity, start, end,
        disciple_loc, disciple_rot, disciple):

        global interval
        global frame_start
        global frame_end

        self.interval = interval
        self.frame_start = frame_start
        self.frame_end = frame_end

        # pivot factor
        self.P = P

        # scale factor
        self.A = A 

        # name
        self.move = move

        # element
        self.part = part

        # element helicity
        self.helicity = helicity

        self.start = start
        self.end = end

        # disciple position
        self.disciple_loc = disciple_loc
        self.disciple_rot = disciple_rot

        # disciple
        self.disciple = disciple

        # Create armature and object
        self.amt = bpy.data.armatures.new(move + '.' + part + '.' + helicity + '.data')
        self.rig = bpy.data.objects.new(move + '.' + part + '.' + helicity, self.amt)

        # Joints
        self.a = [0 for i in range(4)] # Joint α
        self.b = [0 for i in range(self.J)] # Joint β
        self.y = [0 for i in range(self.J)] # Joint γ
        self.o = [0 for i in range(self.J)] # Joint δ

        # Configuration Movement
        self.configMovement(self.P, self.A, self.J, self.a, self.b, self.y, self.o)

        # Construction Movement
        self.constructMovement(self.J, self.helicity, self.amt, self.rig, self.a, self.b, self.y, self.o)

        # Parent set disciple to master        
        self.setParent(self.helicity, self.move, self.rig, self.disciple_loc, self.disciple_rot, self.disciple)

        # Construction Rotation
        self.configRotation(self.rig, self.interval, self.frame_start, self.frame_end, self.start, self.end)

        # Configuration Linkage
        self.configLink(self.A*0.6, self.J, self.helicity, self.rig, self.move, self.part)

        # Construction Linkage
        self.constructLink(self.A*0.6, self.J, self.helicity, self.rig, self.move, self.part)

    # Overriding Configuration Movement
    def configMovement(self, P, A, J, a, b, y, o):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        o[1] = mathutils.Euler((A, A, 0.0), 'XYZ')
        print ("o1 =", o[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D

        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])

        b[2] = mathutils.Euler(((1.15217/0.049732)*A, (-1.08766/0.049732)*A, 0.0), 'XYZ')
        print ("b2 =", b[2])

        b[3] = mathutils.Euler(((1.13928/0.049732)*A, (-1.20627/0.049732)*A, 0.0), 'XYZ')
        print ("b3 =", b[3])
        
        b[4] = mathutils.Euler(((2.37116/0.049732)*A, (-0.862071/0.049732)*A, 0.0), 'XYZ')
        print ("b4 =", b[4])

        y[2] = mathutils.Euler(((1.05277/0.049732)*A, (-1.18716/0.049732)*A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        y[3] = mathutils.Euler(((1.16812/0.049732)*A, (-1.15906/0.049732)*A, 0.0), 'XYZ')
        print ("y3 =", y[3])

        o[2] = mathutils.Euler(((1.04327/0.049732)*A, (-1.14934/0.049732)*A, 0.0), 'XYZ')
        print ("o2 =", o[2])
        
        o[3] = mathutils.Euler(((1.06689/0.049732)*A, (-1.14348/0.049732)*A, 0.0), 'XYZ')
        print ("o3 =", o[3])

        o[4] = mathutils.Euler(((2.26264/0.049732)*A, (-0.73144/0.049732)*A, 0.0), 'XYZ')
        print ("o4 =", o[4])
        
        y[4] = mathutils.Euler(((2.27498/0.049732)*A, (-0.764558/0.049732)*A, 0.0), 'XYZ')
        print ("y4 =", y[4])
        
        y[5] = mathutils.Euler(((2.33891/0.049732)*A, (-0.74051/0.049732)*A, 0.0), 'XYZ')
        print ("y5 =", y[5])

    # Parent set disciple to master
    def setParent(self, helicity, move, rig, disciple_loc, disciple_rot, disciple):

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.context.scene.frame_current = 0

        bpy.ops.object.select_all(action='DESELECT')
        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig

        bpy.ops.object.editmode_toggle()

        parent_bone = 'b4y4' # choose the bone name which you want to be the parent

        rig.data.edit_bones.active = rig.data.edit_bones[parent_bone]

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        disciple.rig.select_set(state=True)

        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig    #the active object will be the parent of all selected object

        bpy.ops.object.parent_set(type='BONE', keep_transform=True)

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        # disciple position
        disciple.rig.location.x += disciple_loc[0]
        disciple.rig.location.y += disciple_loc[1]
        disciple.rig.location.z += disciple_loc[2]

        disciple.rig.rotation_euler = disciple_rot
        

class MiddleWing(ForeWing):
    
    J = 6 #joint number
        
    # Overriding Configuration Movement
    def configMovement(self, P, A, J, helicity, a, b, y, o, w):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        o[1] = mathutils.Euler((A, A, 0.0), 'XYZ')
        print ("o1 =", o[1])

        B = A * 2 * sqrt (2)

        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])

        y[2] = mathutils.Euler((1.404781*A, -3.404781*A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        y[3] = mathutils.Euler((-1*A, -5.809552*A, 0.0), 'XYZ')
        print ("y3 =", y[3])

        y[4] = mathutils.Euler((-1*A, -9.273811*A, 0.0), 'XYZ')
        print ("y4 =", y[4])

        b[2] = mathutils.Euler((3.404781*A, -1.404781*A, 0.0), 'XYZ')
        print ("b2 =", b[2])

        b[3] = mathutils.Euler((0.0/0.034172*A, -0.232561/0.034172*A, 0.0), 'XYZ')
        print ("b3 =", b[3])

        o[2] = mathutils.Euler((0.082042/0.034172*A, -0.150386/0.034172*A, 0.0), 'XYZ')
        print ("o2 =", o[2])
        
        o[3] = mathutils.Euler((-1.191309*A, -6.000875*A, 0.0), 'XYZ')
        
        if helicity == 'right':
            H = 1
        else:
            H = -1
            
        w[0] = mathutils.Euler((-A , y[4].y, -B * H), 'XYZ')
        print ("w0 =", w[0])
      
        w[1] = mathutils.Euler((-A , y[4].y, -B*2 * H), 'XYZ')
        print ("w1 =", w[1])

        w[2] = mathutils.Euler((-0.21152/0.068344*A, -0.617642/0.068344*A, -0.215431/0.068344*A * H), 'XYZ')
        w[3] = mathutils.Euler((-0.21152/0.068344*A, -0.617642/0.068344*A, -0.376182/0.068344*A * H), 'XYZ')
        print ("w2 =", w[2])
        print ("w3 =", w[3])
    
        w[4] = mathutils.Euler((-0.21152/0.068344*A, -0.617642/0.068344*A, -0.518974/0.068344* A * H), 'XYZ')
        print ("w4 =", w[4])
        w[5] = mathutils.Euler((-0.21152/0.068344*A, -0.617642/0.068344*A, -1.08598/0.068344* A * H), 'XYZ')
        print ("w5 =", w[5])
        
    def configLink(self, A, J, helicity, rig, move, part):

        bpy.ops.object.mode_set(mode='OBJECT')
        
        obj_joint = bpy.data.objects["joint.cursor"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y4_fulcrum.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.cursor"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y4_fulcrum.tail.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.cursor"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "fulcrum_y4.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.cursor"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "fulcrum_y4.tail.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        Q = (0.18648+0.146446)*A
    #   Z = -Q*2
        Z = 0.0
#        Z = Q*17

#        obj_joint = bpy.data.objects["joint.gold.000"].copy()

        if helicity == 'right':
            obj_joint = bpy.data.objects["joint.gold.middlewing.a2a1.L"].copy()
        else:
            obj_joint = bpy.data.objects["joint.gold.middlewing.a2a1.R"].copy()

        obj_joint.location = (0.0, 0.0, -Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2a1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.silver.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1a2.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.copper.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2o1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.blue.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a1b1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)


        for n in range(1, J - 2):

            # Pattern 2 of by
            obj_joint = bpy.data.objects["joint.green.001"].copy()
            obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
            obj_joint.scale = (A, A, A)
            obj_joint.name = "b"+str(n)+"y"+str(n)+".mesh." + move + '.' + part +'.' + helicity
            bpy.data.collections['link'].objects.link(obj_joint)

            if n <= (J-4):

                # Pattern 1 of ob
                obj_joint = bpy.data.objects["joint.blue.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q*2 + Q*(n % 2)*6 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "o"+str(n)+"b"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yy
                obj_joint = bpy.data.objects["joint.gold.00"+str(1 + (n+1) % 2)].copy()
                obj_joint.location = (0.0, 0.0, +Q*(1 - (n % 2))*2+Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n)+"y"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

            if n <= (J-5):

                # Pattern 2 of yo
                obj_joint = bpy.data.objects["joint.copper.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n+1)+"o"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)
                

        obj_joint = bpy.data.objects["joint.gold.y3y4.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y3y4.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.gold.g_y3y4.x.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_y3y4.x.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.gold.g_y3y4.z.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_y3y4.z.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)
        
        obj_joint = bpy.data.objects["joint.green.g_1.y.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_1.y.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)
        
        obj_joint = bpy.data.objects["joint.blue.g_2.x.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_2.x.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)
        
        obj_joint = bpy.data.objects["joint.silver.g_3.z.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_3.z.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        for ob in data.collections['link'].objects:
            if "mesh" in ob.name:
                ob.select_set(state = True, view_layer = None)

        bpy.ops.object.make_single_user(type='SELECTED_OBJECTS', object=True, obdata=True, material=True, animation=True)
        bpy.context.scene.cursor.location = (0.0, 0.0, 0.0)
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')
        
        
class HindLeg(MiddleLeg):

    J = 6 #joint number

    # Overriding Configuration Movement
    def configMovement(self, P, A, J, a, b, y, o):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        o[1] = mathutils.Euler((A, A, 0.0), 'XYZ')
        print ("o1 =", o[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D

        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])

        b[2] = mathutils.Euler(((1.50341/0.064893)*A, (-1.41923/0.064893)*A, 0.0), 'XYZ')
        print ("b2 =", b[2])

        b[3] = mathutils.Euler(((1.44415/0.064893)*A, (-1.64073/0.064893)*A, 0.0), 'XYZ')
        print ("b3 =", b[3])
        
        b[4] = mathutils.Euler(((2.95455/0.064893)*A, (-2.32622/0.064893)*A, 0.0), 'XYZ')
        print ("b4 =", b[4])

        y[2] = mathutils.Euler(((1.37371/0.064893)*A, (-1.54907/0.064893)*A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        y[3] = mathutils.Euler(((1.51258/0.064893)*A, (-1.61773/0.064893)*A, 0.0), 'XYZ')
        print ("y3 =", y[3])

        o[2] = mathutils.Euler(((1.39593/0.064893)*A, (-1.5033/0.064893)*A, 0.0), 'XYZ')
        print ("o2 =", o[2])
        
        o[3] = mathutils.Euler(((1.42446/0.064893)*A, (-1.51725/0.064893)*A, 0.0), 'XYZ')
        print ("o3 =", o[3])
       
        o[4] = mathutils.Euler(((2.95564/0.064893)*A, (-2.10463/0.064893)*A, 0.0), 'XYZ')
        print ("o4 =", o[4])
        
        y[4] = mathutils.Euler(((2.9402/0.064893)*A, (-2.14808/0.064893)*A, 0.0), 'XYZ')
        print ("y4 =", y[4])
        
        y[5] = mathutils.Euler(((3.02427/0.064893)*A, (-2.17767/0.064893)*A, 0.0), 'XYZ')
        print ("y5 =", y[5])
        
        
class HindWing(ForeWing):
    
    J = 6 #joint number
        
    # Overriding Configuration Movement
    def configMovement(self, P, A, J, helicity, a, b, y, o, w):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        o[1] = mathutils.Euler((A, A, 0.0), 'XYZ')
        print ("o1 =", o[1])

        B = A * 2 * sqrt (2)

        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])

        y[2] = mathutils.Euler((1.404781*A, -3.404781*A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        y[3] = mathutils.Euler((-1*A, -5.809552*A, 0.0), 'XYZ')
        print ("y3 =", y[3])

        y[4] = mathutils.Euler((-1*A, -9.273811*A, 0.0), 'XYZ')
        print ("y4 =", y[4])

        b[2] = mathutils.Euler((3.404781*A, -1.404781*A, 0.0), 'XYZ')
        print ("b2 =", b[2])

        b[3] = mathutils.Euler((0.0/0.034172*A, -0.232561/0.034172*A, 0.0), 'XYZ')
        print ("b3 =", b[3])

        o[2] = mathutils.Euler((0.082042/0.034172*A, -0.150386/0.034172*A, 0.0), 'XYZ')
        print ("o2 =", o[2])
        
        o[3] = mathutils.Euler((-1.191309*A, -6.000875*A, 0.0), 'XYZ')
        
        if helicity == 'right':
            H = 1
        else:
            H = -1
            
        w[0] = mathutils.Euler((-A , y[4].y, -B * H), 'XYZ')
        print ("w0 =", w[0])
      
        w[1] = mathutils.Euler((-A , y[4].y, -B*2 * H), 'XYZ')
        print ("w1 =", w[1])

        w[2] = mathutils.Euler((-0.128652/0.027337*A, -0.249656/0.027337*A, -0.142024/0.027337*A * H), 'XYZ')
        w[3] = mathutils.Euler((-0.128652/0.027337*A, -0.249656/0.027337*A, -0.206325/0.027337*A * H), 'XYZ')
        print ("w2 =", w[2])
        print ("w3 =", w[3])
    
        w[4] = mathutils.Euler((-0.128652/0.027337*A, -0.249656/0.027337*A, -0.263442/0.027337* A * H), 'XYZ')
        print ("w4 =", w[4])
        w[5] = mathutils.Euler((-0.128652/0.027337*A, -0.249656/0.027337*A, -0.490245/0.027337* A * H), 'XYZ')
        print ("w5 =", w[5])
        
    def configLink(self, A, J, helicity, rig, move, part):

        bpy.ops.object.mode_set(mode='OBJECT')
        
        obj_joint = bpy.data.objects["joint.cursor"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y4_fulcrum.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.cursor"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y4_fulcrum.tail.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.cursor"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "fulcrum_y4.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.cursor"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "fulcrum_y4.tail.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        Q = (0.18648+0.146446)*A
    #   Z = -Q*2
        Z = 0.0
#        Z = Q*17

#        obj_joint = bpy.data.objects["joint.gold.000"].copy()

        if helicity == 'right':
            obj_joint = bpy.data.objects["joint.gold.hindwing.a2a1.L"].copy()
        else:
            obj_joint = bpy.data.objects["joint.gold.hindwing.a2a1.R"].copy()

        obj_joint.location = (0.0, 0.0, -Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2a1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.silver.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1a2.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.copper.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2o1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.blue.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a1b1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)


        for n in range(1, J - 2):

            # Pattern 2 of by
            obj_joint = bpy.data.objects["joint.green.001"].copy()
            obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
            obj_joint.scale = (A, A, A)
            obj_joint.name = "b"+str(n)+"y"+str(n)+".mesh." + move + '.' + part +'.' + helicity
            bpy.data.collections['link'].objects.link(obj_joint)

            if n <= (J-4):

                # Pattern 1 of ob
                obj_joint = bpy.data.objects["joint.blue.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q*2 + Q*(n % 2)*6 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "o"+str(n)+"b"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yy
                obj_joint = bpy.data.objects["joint.gold.00"+str(1 + (n+1) % 2)].copy()
                obj_joint.location = (0.0, 0.0, +Q*(1 - (n % 2))*2+Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n)+"y"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

            if n <= (J-5):

                # Pattern 2 of yo
                obj_joint = bpy.data.objects["joint.copper.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n+1)+"o"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)
                

        obj_joint = bpy.data.objects["joint.gold.y3y4.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y3y4.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.gold.g_y3y4.x.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_y3y4.x.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.gold.g_y3y4.z.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_y3y4.z.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)
        
        obj_joint = bpy.data.objects["joint.green.g_1.y.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_1.y.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)
        
        obj_joint = bpy.data.objects["joint.blue.g_2.x.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_2.x.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)
        
        obj_joint = bpy.data.objects["joint.silver.g_3.z.forewing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_3.z.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        for ob in data.collections['link'].objects:
            if "mesh" in ob.name:
                ob.select_set(state = True, view_layer = None)

        bpy.ops.object.make_single_user(type='SELECTED_OBJECTS', object=True, obdata=True, material=True, animation=True)
        bpy.context.scene.cursor.location = (0.0, 0.0, 0.0)
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')
        
        
class Wing(ForeWing):
    
    J = 6 #joint number
    
    # Overriding
    def __init__(self, P, A, move, part, helicity, start, end):

        global interval
        global frame_start
        global frame_end

        self.interval = interval
        self.frame_start = frame_start
        self.frame_end = frame_end

        # pivot factor
        self.P = P

        # scale factor
        self.A = A 

        # name
        self.move = move

        # element
        self.part = part

        # element helicity
        self.helicity = helicity

        self.start = start
        self.end = end

        # Create armature and object
        self.amt = bpy.data.armatures.new(move + '.' + part + '.' + helicity + '.data')
        self.rig = bpy.data.objects.new(move + '.' + part + '.' + helicity, self.amt)

        # Joints
        self.a = [0 for i in range(4)] # Joint α
        self.b = [0 for i in range(self.J)] # Joint β
        self.y = [0 for i in range(self.J)] # Joint γ
        self.o = [0 for i in range(self.J)] # Joint δ
        self.w = [0 for i in range(self.J+1)] # Joint ω

        # Configuration Movement
        self.configMovement(self.P, self.A, self.J, self.helicity, self.a, self.b, self.y, self.o, self.w)

        # Construction Movement
        self.constructMovement(self.J, self.helicity, self.amt, self.rig, self.a, self.b, self.y, self.o, self.w)
 
        # Construction Rotation
        self.configRotation(self.rig, self.interval, self.frame_start, self.frame_end, self.start, self.end)

        # Configuration Linkage
        self.configLink(self.A * 1, self.J, self.helicity, self.rig, self.move, self.part)

        # Construction Linkage
        self.constructLink(self.A * 1, self.J, self.helicity, self.rig, self.move, self.part)
    
    # Overriding Configuration Movement
    def configMovement(self, P, A, J, helicity, a, b, y, o, w):

        mat_a = [0 for i in range(4)] # Joint α matrix
        mat_b = [0 for i in range(self.J)] # Joint β matrix
        mat_y = [0 for i in range(self.J)] # Joint γ matrix
        mat_o = [0 for i in range(self.J)] # Joint δ matrix

        a[1] = mathutils.Euler((P, A, 0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0), 'XYZ')
        print ("b1 =", b[1])

        o[1] = mathutils.Euler((A, A, 0), 'XYZ')
        print ("o1 =", o[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D

        a[0] = mathutils.Euler((-A - E + (D * 0.5), -A - (D * 0.5), 0), 'XYZ')
        print ("a0 =", a[0])
        mat_a[0] = Matrix.Translation(a[0])

        a[3] = mathutils.Euler((0-a[0].x, 0-a[0].y, 0-a[0].z), 'XYZ')
        print ("a3 =", a[3])
        mat_a[3] = Matrix.Translation(a[3]) 

        y[1] = mathutils.Euler((-A, -A, 0), 'XYZ')
        print ("y1 =", y[1])
        mat_y[1] = Matrix.Translation(y[1])

### pattern A

        b[2] = mathutils.Euler((a[0].x + E + (A * 2), a[0].y + (A * 2), 0), 'XYZ')
        print ("b2 =", b[2])
        mat_b[2] = Matrix.Translation(b[2])

        b[3] = mathutils.Euler((a[0].x + E - (D * 0.5), a[0].y - (A * 2), 0), 'XYZ')
        print ("b3 =", b[3])
        mat_b[3] = Matrix.Translation(b[3])
        
        y[2] = mathutils.Euler((a[0].x + E, a[0].y, 0), 'XYZ')
        print ("y2 =", y[2])
        mat_y[2] = Matrix.Translation(y[2])

        y[3] = mathutils.Euler((a[0].x + E - (D * 0.5), a[0].y - (D * 0.5), 0), 'XYZ')
        print ("y3 =", y[3])
        mat_y[3] = Matrix.Translation(y[3])

        o[2] = mathutils.Euler((a[0].x + E + (A * 2), a[0].y - (A * 2), 0), 'XYZ')
        print ("o2 =", o[2])
        mat_o[2] = Matrix.Translation(o[2])
        
        o[3] = mathutils.Euler((a[0].x + E - (D * 0.5) - (A * 2), a[0].y - (D * 0.5) - (A * 2), 0), 'XYZ')
        print ("o3 =", o[3])
        mat_o[3] = Matrix.Translation(o[3])
        
### pattern A end

        org_rot_mat = Matrix.Rotation(math.radians(0), 4, 'Z')

        # define the rotation
        rot_mat = Matrix.Rotation(math.radians(-45), 4, 'Z')   

        for j in range(2, J - 2):

            mat_y[j + 2] = mat_a[0] @ org_rot_mat @ rot_mat @ mat_a[3] @ mat_y[j]

#            obj.matrix_world = mat_y[j + 2]
            # extract components back out of the matrix
            loc, rot, sca = mat_y[j + 2].decompose()
            y[j + 2] = mathutils.Euler(loc, 'XYZ')
            print("y"+str(j + 2)+" = ", y[j + 2], rot, sca)

            mat_b[j + 2] = mat_a[0] @ org_rot_mat @ rot_mat @ mat_a[3] @ mat_b[j]
                   
#            obj.matrix_world = mat_b[j + 2]
            # extract components back out of the matrix
            loc, rot, sca = mat_b[j + 2].decompose()
            b[j + 2] = mathutils.Euler(loc, 'XYZ')
            print("b"+str(j + 2)+" = ", b[j + 2], rot, sca)

            mat_o[j + 2] = mat_a[0] @ org_rot_mat @ rot_mat @ mat_a[3] @ mat_o[j]
            
#            obj.matrix_world = mat_o[j + 2]
            # extract components back out of the matrix
            loc, rot, sca = mat_o[j + 2].decompose()
            o[j + 2] = mathutils.Euler(loc, 'XYZ')
            print("o"+str(j + 2)+" = ", o[j + 2], rot, sca)
 
        if helicity == 'right':
            H = 1
        else:
            H = -1
            
        w[0] = mathutils.Euler((-A , y[4].y, -B * H), 'XYZ')
        print ("w0 =", w[0])
      
        w[1] = mathutils.Euler((-A , y[4].y, -B*2 * H), 'XYZ')
        print ("w1 =", w[1])

        w[2] = mathutils.Euler((-0.164432/0.069978*A, -1.1257/0.069978*A, 0.090761/0.069978*A * H), 'XYZ')
        w[3] = mathutils.Euler((-0.164432/0.069978*A, -1.1257/0.069978*A, -0.178251/0.069978*A * H), 'XYZ')
        print ("w2 =", w[2])
        print ("w3 =", w[3])
    
        w[4] = mathutils.Euler((-0.164432/0.069978*A, -1.1257/0.069978*A, -0.375753/0.069978* A * H), 'XYZ')
        print ("w4 =", w[4])
        w[5] = mathutils.Euler((-0.164432/0.069978*A, -1.1257/0.069978*A, -2.72923/0.034172* A * H), 'XYZ')
        print ("w5 =", w[5])
        w[6] = mathutils.Euler((-0.164432/0.069978*A, -1.1257/0.069978*A, -5.89568/0.034172* A * H), 'XYZ')
        print ("w6 =", w[6])

    def constructMovement(self, J, helicity, amt, rig, a, b, y, o, w):

        # Linkages
        aa = [[0 for i in range(4)] for j in range(4)] # Link α(i) - α(j)
        ab = [[0 for i in range(4)] for j in range(4)] # Link α(i) - β(j)
        ya = [[0 for i in range(4)] for j in range(4)] # Link γ(i) - α(j)
        ao = [[0 for i in range(4)] for j in range(4)] # Link α(i) - δ(j)
        ob = [[0 for i in range(self.J)] for j in range(self.J)] # Link δ(i) - β(j)
        yy = [[0 for i in range(self.J)] for j in range(self.J)] # Link γ(i) - γ(j)
        by = [[0 for i in range(self.J)] for j in range(self.J)] # Link β(i) - γ(j)
        yo = [[0 for i in range(self.J)] for j in range(self.J)] # Link γ(i) - δ(j)

        rig.location = mathutils.Euler((0.0, 0.0, 0.0), 'XYZ')
        rig.show_in_front = True
        amt.show_names = True
        amt.display_type = 'STICK'
#        amt.display_type = 'BBONE'

        # Link object to scene

        bpy.data.collections['movement'].objects.link(rig)
        bpy.context.view_layer.objects.active = rig
        bpy.context.view_layer.update()

        # Edit
        bpy.ops.object.editmode_toggle()

        # Construction Linkage
        aa[2][1] = amt.edit_bones.new('a2a1')
        aa[2][1].head = a[2]
        aa[2][1].tail = a[1]
        
        ab[1][1] = amt.edit_bones.new('a1b1')
        ab[1][1].head = a[1]
        ab[1][1].tail = b[1]
        ab[1][1].parent = aa[2][1]
 
        by[1][1] = amt.edit_bones.new('b1y1')
        by[1][1].head = b[1]
        by[1][1].tail = y[1]
        by[1][1].parent = ab[1][1]
        by[1][1].use_inherit_rotation = False

        ya[1][2] = amt.edit_bones.new('y1a2')
        ya[1][2].head = y[1]
        ya[1][2].tail = a[2]
        ya[1][2].parent = by[1][1]

        ao[2][1] = amt.edit_bones.new('a2o1')
        ao[2][1].head = a[2]
        ao[2][1].tail = o[1]
        ao[2][1].parent = ya[1][2]

        ob[1][2] = amt.edit_bones.new('o1b2')
        ob[1][2].head = o[1]
        ob[1][2].tail = b[2]
        ob[1][2].parent = ao[2][1]
        
        yy[1][2] = amt.edit_bones.new('y1y2')
        yy[1][2].head = y[1]
        yy[1][2].tail = y[2]
        yy[1][2].parent = by[1][1]

        for j in range(2, J - 1):

            by[j][j] = amt.edit_bones.new('b'+ str(j) + 'y'+ str(j))
            by[j][j].head = b[j]
            by[j][j].tail = y[j]
            by[j][j].parent = ob[j-1][j]

            yo[j][j] = amt.edit_bones.new('y'+ str(j) + 'o'+ str(j))
            yo[j][j].head = y[j]
            yo[j][j].tail = o[j]
            yo[j][j].parent = yy[j-1][j]

            if j < (J - 2):
                yy[j][j+1] = amt.edit_bones.new('y'+ str(j) + 'y'+ str(j+1))
                yy[j][j+1].head = y[j]
                yy[j][j+1].tail = y[j+1]
                yy[j][j+1].parent = by[j][j]

                ob[j][j+1] = amt.edit_bones.new('o'+ str(j) + 'b'+ str(j+1))
                ob[j][j+1].head = o[j]
                ob[j][j+1].tail = b[j+1]
                ob[j][j+1].parent = yo[j][j]


        # y4 2 fulcrum vector
        y4_fulcrum = amt.edit_bones.new('y4_fulcrum')
        y4_fulcrum.head = y[4]
        y4_fulcrum.tail = w[0]
        y4_fulcrum.parent = yy[3][4]

        y4_fulcrum_tail = amt.edit_bones.new('y4_fulcrum.tail')
        y4_fulcrum_tail.head = w[0]
        y4_fulcrum_tail.tail = w[1]
        y4_fulcrum_tail.parent = y4_fulcrum


        # formula y3y4 ginbal_ring x-axis
        g_y3y4_x = amt.edit_bones.new('g_y3y4.x')
        g_y3y4_x.head = y[3]
        g_y3y4_x.tail = y[4]
        g_y3y4_x.parent = by[3][3]

        # formula y3y4 ginbal_ring z-axis
        g_y3y4_z = amt.edit_bones.new('g_y3y4.z')
        g_y3y4_z.head = y[4]
        g_y3y4_z.tail = w[0]
        g_y3y4_z.parent = g_y3y4_x

        # formula b4y4 ginbal_ring x-axis
        g_b4y4_x = amt.edit_bones.new('g_b4y4.x')
        g_b4y4_x.head = b[4]
        g_b4y4_x.tail = y[4]
        g_b4y4_x.parent = ob[3][4]

        # formula b4y4 ginbal_ring z-axis
        g_b4y4_z = amt.edit_bones.new('g_b4y4.z')
        g_b4y4_z.head = y[4]
        g_b4y4_z.tail = w[0]
        g_b4y4_z.parent = g_b4y4_x


        # fulcrum 2 y4
        fulcrum_y4 = amt.edit_bones.new('fulcrum_y4')
        fulcrum_y4.head = w[4]
        fulcrum_y4.tail = w[3]
        fulcrum_y4.parent = aa[2][1]

        # fulcrum y4 tail
        fulcrum_y4_tail = amt.edit_bones.new('fulcrum_y4.tail')
        fulcrum_y4_tail.head = w[3]
        fulcrum_y4_tail.tail = w[2]
        fulcrum_y4_tail.parent = fulcrum_y4
    

        # fulcrum gimbal 1 y-axis
        g_1_y = amt.edit_bones.new('g_1.y')
        g_1_y.head = mathutils.Euler((w[4].x, y[4].y + (0.312067-0.244966), w[4].z), 'XYZ')
        g_1_y.tail = w[4]
        g_1_y.parent = aa[2][1]

        # fulcrum gimbal 2 x-axis
        g_2_x = amt.edit_bones.new('g_2.x')
        g_2_x.head = w[4]
        g_2_x.tail = w[3]
        g_2_x.parent = g_1_y
    
    
        # wings gimbal 3 z-axis
        g_3_z = amt.edit_bones.new('g_3.z')
        g_3_z.head = w[4]
        g_3_z.tail = w[5]
        g_3_z.parent = g_2_x

        # wings gimbal 4 z-axis
        g_4_z = amt.edit_bones.new('g_4.z')
        g_4_z.head = w[5]
        g_4_z.tail = w[6]
        g_4_z.parent = g_2_x

        # all bones select

        # Bone constraints. Armature must be in pose mode.
        bpy.ops.object.mode_set(mode='POSE')

        bpy.ops.pose.select_all(action="SELECT")

        # Edit
        bpy.ops.object.editmode_toggle()

        if helicity == 'right':
            bpy.ops.armature.calculate_roll(type='GLOBAL_POS_Z')
        else:
            bpy.ops.armature.calculate_roll(type='GLOBAL_NEG_Z')
 
        # IK constraint
        cns = rig.pose.bones['y1a2'].constraints.new('IK')
        cns.name = 'Ik'
        cns.target = rig
        cns.subtarget = 'a2a1'
        cns.chain_count = 2
        cns.use_stretch = False

        for j in range(2, J - 1):
            cns = rig.pose.bones['b'+str(j) +'y'+str(j)].constraints.new('IK')
            cns.name = 'Ik'
            cns.target = rig
            cns.subtarget = 'y'+str(j)+'o'+str(j)
            cns.iterations = 500
            cns.chain_count = 2
            cns.use_stretch = False

        # IK constraint y4 -> fulcrum
        cns = rig.pose.bones['y4_fulcrum'].constraints.new('DAMPED_TRACK')
        cns.name = 'Damped Track'
        cns.target = rig
        cns.subtarget = 'fulcrum_y4'
        cns.head_tail = 0

        # IK constraint fulcrum -> y4
        cns = rig.pose.bones['fulcrum_y4'].constraints.new('DAMPED_TRACK')
        cns.name = 'Damped Track'
        cns.target = rig
        cns.subtarget = 'y3y4'
        cns.head_tail = 1

        # IK constraint g_1.z - g_2.x - y4
        cns = rig.pose.bones['g_2.x'].constraints.new('IK')
        cns.name = 'Ik'
        cns.target = rig
        cns.subtarget = 'fulcrum_y4.tail'
        cns.pole_target = rig
        cns.pole_subtarget = 'fulcrum_y4'
        cns.chain_count = 2
        cns.use_stretch = False
        cns.pole_angle = math.radians(-90)

        # Copy rotation constraints
        cns = rig.pose.bones['g_3.z'].constraints.new('COPY_ROTATION')
        cns.name = 'Copy_Rotation'
        cns.target = rig
        cns.subtarget = 'g_y3y4.z'
        cns.owner_space = 'WORLD'
        cns.target_space = 'WORLD'

        # Copy rotation constraints
        cns = rig.pose.bones['g_4.z'].constraints.new('COPY_ROTATION')
        cns.name = 'Copy_Rotation'
        cns.target = rig
        cns.subtarget = 'g_b4y4.z'
        cns.owner_space = 'WORLD'
        cns.target_space = 'WORLD'

        # IK constraint
        cns = rig.pose.bones['g_y3y4.z'].constraints.new('IK')
        cns.name = 'Ik'
        cns.target = rig
        cns.subtarget = 'y4_fulcrum.tail'
        cns.pole_target = rig
        cns.pole_subtarget = 'y4_fulcrum'
        cns.chain_count = 2
        cns.use_stretch = False
        cns.pole_angle = math.radians(90)

        # IK constraint
        cns = rig.pose.bones['g_b4y4.z'].constraints.new('IK')
        cns.name = 'Ik'
        cns.target = rig
        cns.subtarget = 'y4_fulcrum.tail'
        cns.pole_target = rig
        cns.pole_subtarget = 'y4_fulcrum'
        cns.chain_count = 2
        cns.use_stretch = False
        cns.pole_angle = math.radians(90)

#        if helicity == 'right':
#            cns.pole_angle = math.radians(90)
#        else:
#            cns.pole_angle = math.radians(-90)

        bpy.ops.object.mode_set(mode='OBJECT')

    def configLink(self, A, J, helicity, rig, move, part):

        bpy.ops.object.mode_set(mode='OBJECT')
        
        obj_joint = bpy.data.objects["joint.cursor"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y4_fulcrum.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.cursor"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y4_fulcrum.tail.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.cursor"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "fulcrum_y4.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.cursor"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "fulcrum_y4.tail.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        Q = (0.18648+0.146446)*A
    #   Z = -Q*2
        Z = 0.0
#        Z = Q*17

#        obj_joint = bpy.data.objects["joint.gold.000"].copy()

        if helicity == 'right':
            obj_joint = bpy.data.objects["joint.gold.wing.a2a1.L"].copy()
        else:
            obj_joint = bpy.data.objects["joint.gold.wing.a2a1.R"].copy()

        obj_joint.location = (0.0, 0.0, -Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2a1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.silver.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1a2.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.copper.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2o1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.blue.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a1b1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)


        for n in range(1, J - 2):

            if n <= (J-3):

                # Pattern 2 of by
                obj_joint = bpy.data.objects["joint.green.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "b"+str(n)+"y"+str(n)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 1 of ob
                obj_joint = bpy.data.objects["joint.blue.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q*2 + Q*(n % 2)*6 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "o"+str(n)+"b"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

            if n <= (J-4):

                # Pattern 2 of yo
                obj_joint = bpy.data.objects["joint.copper.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n+1)+"o"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yy
                obj_joint = bpy.data.objects["joint.gold.00"+str(1 + (n+1) % 2)].copy()
                obj_joint.location = (0.0, 0.0, +Q*(1 - (n % 2))*2+Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n)+"y"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)
                

        obj_joint = bpy.data.objects["cursor.001"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y4o4.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.green.b4y4.001"].copy()
        obj_joint.location = (0.0, 0.0, +Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "b4y4.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        if helicity == 'right':
            obj_joint = bpy.data.objects["joint.gold.y3y4.R"].copy()
        else:
            obj_joint = bpy.data.objects["joint.gold.y3y4.L"].copy()
        obj_joint.location = (0.0, 0.0, +Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y3y4.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        if helicity == 'right':
            obj_joint = bpy.data.objects["joint.gold.g_y3y4.x.R"].copy()
        else:
            obj_joint = bpy.data.objects["joint.gold.g_y3y4.x.L"].copy()        
        obj_joint.location = (0.0, 0.0, +Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_y3y4.x.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.gold.g_y3y4.z.wing"].copy()
        obj_joint.location = (0.0, 0.0, +Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_y3y4.z.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)
        
        obj_joint = bpy.data.objects["joint.green.g_b4y4.z.wing"].copy()
        obj_joint.location = (0.0, 0.0, +Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_b4y4.z.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.green.g_b4y4.x.001"].copy()
        obj_joint.location = (0.0, 0.0, +Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_b4y4.x.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.green.g_1.y.wing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_1.y.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)
        
        obj_joint = bpy.data.objects["joint.blue.g_2.x.wing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_2.x.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)
        
        obj_joint = bpy.data.objects["joint.silver.g_3.z.wing"].copy()
        obj_joint.location = (0.0, 0.0, 0.0)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_3.z.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.copper.g_4.z.wing"].copy()
        obj_joint.location = (0.0, 0.0, +Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "g_4.z.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)


        for ob in data.collections['link'].objects:
            if "mesh" in ob.name:
                ob.select_set(state = True, view_layer = None)

        bpy.ops.object.make_single_user(type='SELECTED_OBJECTS', object=True, obdata=True, material=True, animation=True)
        bpy.context.scene.cursor.location = (0.0, 0.0, 0.0)
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')

    def constructLink(self, A, J, helicity, rig, move, part):

        # Move and rotate the tip bone in pose mode
        bpy.context.view_layer.objects.active = rig 

        Y = 1.1838*A

        for n in rig.pose.bones:

            if (n.name != "y4o4") or (n.name != "y4y5"):
#            if n.name != "o" + str(J-2) + "b" + str(J-1):
                # we can get the object from the pose bone
                obj = n.id_data
                matrix_final = obj.matrix_world @ n.matrix

                # Create armature and object
                lnk = bpy.data.armatures.new(n.name[:len(n.name)]+'.data.' + helicity)
                lnk_rig = bpy.data.objects.new(n.name[:len(n.name)]+'.link.' + helicity, lnk)
                lnk_rig.location = mathutils.Euler((0.0, 0.0, 0.0), 'XYZ')

                # rig.show_in_front = True
                lnk.show_names = True
                lnk.display_type = 'STICK'

                bpy.data.collections['link'].objects.link(lnk_rig)
                bpy.context.view_layer.objects.active = lnk_rig
                bpy.context.view_layer.update()

                # Create bones

                # mode='EDIT'
                bpy.ops.object.editmode_toggle()
    
                link = lnk.edit_bones.new(n.name[:len(n.name)])
                link.head = (0.0, 0.0, 0.0)
                link.tail = (0.0, Y, 0.0)

                link_head = lnk.edit_bones.new('head')
                link_head.head = (0.0, 0.0, 0.1)
                link_head.tail = (0.0, 0.0, 0.0)
                link_head.parent = link
                link_head.use_inherit_scale = False

                link_tail = lnk.edit_bones.new('tail')
                link_tail.head = (0.0, Y, 0.0)
                link_tail.tail = (0.0, Y, -0.1)
                link_tail.parent = link
                link_tail.use_inherit_scale = False

                bpy.ops.object.mode_set(mode='OBJECT')

                ob = bpy.data.objects[n.name[:len(n.name)]+'.mesh.' + move + '.' + part +'.' + helicity]
                ob.location = mathutils.Euler((0.0, 0.0, 0.0), 'XYZ')
    
                # Give mesh object an armature modifier, using vertex groups but
                # not envelopes
                mod = ob.modifiers.new('MyRigModif', 'ARMATURE')
                mod.object = lnk_rig
                mod.use_bone_envelopes = False
                mod.use_vertex_groups = True

                # Bone constraints. Armature must be in pose mode.
                bpy.ops.object.mode_set(mode='POSE')
 
                # Copy rotation constraints Base -> Tip
                pBase = lnk_rig.pose.bones[n.name[:len(n.name)]]
                cns = pBase.constraints.new('COPY_LOCATION')
                cns.name = 'Copy_Location'
                cns.target = rig
                cns.subtarget = n.name[:len(n.name)]
                cns.owner_space = 'WORLD'
                cns.target_space = 'WORLD'

                # Copy rotation constraints Base -> Tip
                pBase = lnk_rig.pose.bones[n.name[:len(n.name)]]
                cns = pBase.constraints.new('COPY_ROTATION')
                cns.name = 'Copy_Rotation'
                cns.target = rig
                cns.subtarget = n.name[:len(n.name)]
                cns.owner_space = 'WORLD'
                cns.target_space = 'WORLD'

                # StretchTo constraint Mid -> Tip with influence 0.5
                cns1 = pBase.constraints.new('STRETCH_TO')
                cns1.name = 'Stretch'
                cns1.target = rig
                cns1.subtarget = n.name[:len(n.name)]
                cns1.head_tail = 1
                cns1.rest_length = Y
                cns1.influence = 1
                cns1.keep_axis = 'PLANE_Z'
                cns1.volume = 'NO_VOLUME'

                bpy.ops.object.mode_set(mode='OBJECT')
        

class Spine(Formula):

    J = 7 #joint number

    # Overriding
    def __init__(self, P, A, move, part, helicity, start, end,
            disciple_loc, disciple_rot, disciple,
            disciple2_loc, disciple2_rot, disciple2):

        global interval
        global frame_start
        global frame_end

        self.interval = interval
        self.frame_start = frame_start
        self.frame_end = frame_end

        # pivot factor
        self.P = P

        # scale factor
        self.A = A 

        # name
        self.move = move

        # element
        self.part = part

        # element helicity
        self.helicity = helicity

        self.start = start
        self.end = end

        # disciple position
        self.disciple_loc = disciple_loc
        self.disciple_rot = disciple_rot

        # disciple position
        self.disciple2_loc = disciple2_loc
        self.disciple2_rot = disciple2_rot

        # disciple
        self.disciple = disciple
        self.disciple2 = disciple2

        # Create armature and object
        self.amt = bpy.data.armatures.new(move + '.' + part + '.' + helicity + '.data')
        self.rig = bpy.data.objects.new(move + '.' + part + '.' + helicity, self.amt)

        # Joints
        self.a = [0 for i in range(4)] # Joint α
        self.b = [0 for i in range(self.J)] # Joint β
        self.y = [0 for i in range(self.J)] # Joint γ
        self.o = [0 for i in range(self.J)] # Joint δ

        # Configuration Movement
        self.configMovement(self.P, self.A, self.J, self.a, self.b, self.y, self.o)

        # Construction Movement
        self.constructMovement(self.J, self.helicity, self.amt, self.rig, self.a, self.b, self.y, self.o)

        # Parent set disciple to master       
        self.setParent(self.helicity, self.move, self.rig, 
            self.disciple_loc, self.disciple_rot, self.disciple, 
            self.disciple2_loc, self.disciple2_rot, self.disciple2)

        # Construction Rotation
        self.configRotation(self.rig, self.interval, self.frame_start, self.frame_end, self.start, self.end)

        # Configuration Linkage
        self.configLink(self.A*0.3, self.J, self.helicity, self.rig, self.move, self.part)

        # Construction Linkage
        self.constructLink(self.A*0.3, self.J, self.helicity, self.rig, self.move, self.part)

    # Overriding Configuration Movement
    def configMovement(self, P, A, J, a, b, y, o):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        o[1] = mathutils.Euler((A, A, 0.0), 'XYZ')
        print ("o1 =", o[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D
        
        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])

        b[2] = mathutils.Euler(((3.37305/0.578724)*A, (-2.2156/0.578724)*A, 0.0), 'XYZ')
        print ("b2 =", b[2])

        b[3] = mathutils.Euler(((3.37305/0.578724)*A, (-6.16738/0.578724)*A, 0.0), 'XYZ')
        print ("b3 =", b[3])

        b[4] = mathutils.Euler(((1.05816/0.578724)*A, (-4.5305/0.578724)*A, 0.0), 'XYZ')
        print ("b4 =", b[4])

        y[2] = mathutils.Euler(((2.2156/0.578724)*A, (-3.37305/0.578724)*A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        y[3] = mathutils.Euler(((5.00993/0.578724)*A, (-6.16738/0.578724)*A, 0.0), 'XYZ')
        print ("y3 =", y[3])

        o[2] = b[2]
        print ("o2 =", o[2])
        
        o[3] = mathutils.Euler(((5.00993/0.578724)*A, (-4.5305/0.578724)*A, 0.0), 'XYZ')
        print ("o3 =", o[3])
                
        y[4] = y[2]
        print ("y4 =", y[4])
        
        o[4] = b[4]
        print ("o4 =", o[4])

        b[5] = mathutils.Euler(((-1.73617/0.578724)*A, (-1.73617/0.578724)*A, 0.0), 'XYZ')
        print ("b5 =", b[5])

        y[5] = y[1]
        print ("y5 =", y[5])

        o[5] = b[5]
        
        y[6] = mathutils.Euler(((-3.37305/0.578724)*A, (2.2156/0.578724)*A, 0.0), 'XYZ')
        print ("y6 =", y[6])

    # Parent set disciple to master        
    def setParent(self, helicity, move, rig, 
        disciple_loc, disciple_rot, disciple,
        disciple2_loc, disciple2_rot, disciple2):

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.context.scene.frame_current = 0

        bpy.ops.object.select_all(action='DESELECT')
        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig

        bpy.ops.object.editmode_toggle()

        parent_bone = 'y5y6' # choose the bone name which you want to be the parent

        rig.data.edit_bones.active = rig.data.edit_bones[parent_bone]

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        disciple.rig.select_set(state=True)

        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig    #the active object will be the parent of all selected object

        bpy.ops.object.parent_set(type='BONE', keep_transform=True)
        
        bpy.ops.object.select_all(action='DESELECT') #deselect all objects
        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig

        bpy.ops.object.editmode_toggle()

        parent_bone = 'y5y6' # choose the bone name which you want to be the parent

        rig.data.edit_bones.active = rig.data.edit_bones[parent_bone]

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        disciple2.rig.select_set(state=True)

        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig    #the active object will be the parent of all selected object

        bpy.ops.object.parent_set(type='BONE', keep_transform=True)
        
        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        # disciple position
        disciple.rig.location.x += disciple_loc[0]
        disciple.rig.location.y += disciple_loc[1]
        disciple.rig.location.z += disciple_loc[2]

        disciple.rig.rotation_euler = disciple_rot

        # disciple2 position
        disciple2.rig.location.x += disciple2_loc[0]
        disciple2.rig.location.y += disciple2_loc[1]
        disciple2.rig.location.z += disciple2_loc[2]

        disciple2.rig.rotation_euler = disciple2_rot


    def configLink(self, A, J, helicity, rig, move, part):

        bpy.ops.object.mode_set(mode='OBJECT')
    
        Q = (0.18648+0.146446)*A
    #   Z = -Q*2
        Z = 0.0

        obj_joint = bpy.data.objects["joint.gold.spine.a2a1"].copy()
        obj_joint.location = (0.0, 0.0, -Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2a1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.silver.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1a2.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.copper.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2o1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.blue.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a1b1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)


        for n in range(1, J - 1):
            
            if n >= (3):
                N=-Q*5
            else:
                N=-Q*0

            if n <= (J-2):

                # Pattern 2 of by
                obj_joint = bpy.data.objects["joint.green.001"].copy()
                obj_joint.location = (0.0, 0.0, N-Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "b"+str(n)+"y"+str(n)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

            if n <= (J-3):

                # Pattern 2 of yy
                if n == (2):
                    obj_joint = bpy.data.objects["joint.gold.spine.y2y3"].copy()
                else:
                    obj_joint = bpy.data.objects["joint.gold.00"+str(1 + (n+1) % 2)].copy()

                obj_joint.location = (0.0, 0.0, N+Q*(1 - (n % 2))*2+Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n)+"y"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 1 of ob
                if n == (2):
                    obj_joint = bpy.data.objects["joint.blue.spine.o2b3"].copy()
                else:
                    obj_joint = bpy.data.objects["joint.blue.001"].copy()
                    
                obj_joint.location = (0.0, 0.0, N-Q*2 + Q*(n % 2)*6 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "o"+str(n)+"b"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yo
                if n == (2):
                    obj_joint = bpy.data.objects["joint.copper.spine.y3o3"].copy()
                else:
                    obj_joint = bpy.data.objects["joint.copper.001"].copy()

                obj_joint.location = (0.0, 0.0, N-Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n+1)+"o"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)


        obj_joint = bpy.data.objects["joint.gold.spine.y5y6"].copy()
        obj_joint.location = (0.0, 0.0, N+Q*(1 - (n % 2))*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y5y6.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        for ob in data.collections['link'].objects:
            if "mesh" in ob.name:
                ob.select_set(state = True, view_layer = None)

        bpy.ops.object.make_single_user(type='SELECTED_OBJECTS', object=True, obdata=True, material=True, animation=True)
        bpy.context.scene.cursor.location = (0.0, 0.0, 0.0)
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')


class RightIlium(RightShoulder):

    J = 7 #joint number
    
    # Overriding
    def __init__(self, P, A, move, part, helicity, start, end, 
            disciple_loc, disciple_rot, disciple, 
            disciple2_loc, disciple2_rot, disciple2, 
            disciple3_loc, disciple3_rot, disciple3):

        global interval
        global frame_start
        global frame_end

        self.interval = interval
        self.frame_start = frame_start
        self.frame_end = frame_end

        # pivot factor
        self.P = P

        # scale factor
        self.A = A 

        # name
        self.move = move

        # element
        self.part = part

        # element helicity
        self.helicity = helicity

        self.start = start
        self.end = end

        # disciple position
        self.disciple_loc = disciple_loc
        self.disciple_rot = disciple_rot

        # disciple
        self.disciple = disciple
        
        # disciple position
        self.disciple2_loc = disciple2_loc
        self.disciple2_rot = disciple2_rot

        # disciple
        self.disciple2 = disciple2

        # disciple position
        self.disciple3_loc = disciple3_loc
        self.disciple3_rot = disciple3_rot

        # disciple
        self.disciple3 = disciple3

        # Create armature and object
        self.amt = bpy.data.armatures.new(move + '.' + part + '.' + helicity + '.data')
        self.rig = bpy.data.objects.new(move + '.' + part + '.' + helicity, self.amt)

        # Joints
        self.a = [0 for i in range(4)] # Joint α
        self.b = [0 for i in range(self.J)] # Joint β
        self.y = [0 for i in range(self.J)] # Joint γ
        self.o = [0 for i in range(self.J)] # Joint δ

        # Configuration Movement
        self.configMovement(self.P, self.A, self.J, self.a, self.b, self.y, self.o)

        # Construction Movement
        self.constructMovement(self.J, self.helicity, self.amt, self.rig, self.a, self.b, self.y, self.o)

        # Parent set disciple to master       
        self.setParent(self.helicity, self.move, self.rig, 
            self.disciple_loc, self.disciple_rot, self.disciple, 
            self.disciple2_loc, self.disciple2_rot, self.disciple2,
            self.disciple3_loc, self.disciple3_rot, self.disciple3)

        # Construction Rotation
        self.configRotation(self.rig, self.interval, self.frame_start, self.frame_end, self.start, self.end)

        # Configuration Linkage
        self.configLink(self.A*0.3, self.J, self.helicity, self.rig, self.move, self.part)

        # Construction Linkage
        self.constructLink(self.A*0.3, self.J, self.helicity, self.rig, self.move, self.part)

    # Overriding Configuration Movement
    def configMovement(self, P, A, J, a, b, y, o):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        o[1] = mathutils.Euler((A, A, 0.0), 'XYZ')
        print ("o1 =", o[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D
        
        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])

        b[2] = mathutils.Euler(((A*3/0.10599)*A, (A/0.10599)*A, 0.0), 'XYZ')
        print ("b2 =", b[2])

        b[3] = mathutils.Euler(((0.222378/0.431828)*A, (-0.516001/0.431828)*A, 0.0), 'XYZ')
        print ("b3 =", b[3])

        b[4] = mathutils.Euler(((0.344001/0.431828)*A, (-0.344001/0.431828)*A, 0.0), 'XYZ')
        print ("b4 =", b[4])
        
        b[5] = mathutils.Euler(((-0.786222/0.431828)*A, (2.50622/0.431828)*A, 0.0), 'XYZ')
        print ("b5 =", b[5])

        y[2] = mathutils.Euler(((A/0.10599)*A, (-A/0.10599)*A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        y[3] = mathutils.Euler(((0.222378/0.431828)*A, (-0.637623/0.431828)*A, 0.0), 'XYZ')
        print ("y3 =", y[3])

        y[4] = mathutils.Euler(((A/0.10599)*A, (-A/0.10599)*A, 0.0), 'XYZ')
        print ("y4 =", y[4])

        y[5] = mathutils.Euler(((A/0.10599)*A, (2.50622/0.431828)*A, 0.0), 'XYZ')
        print ("y5 =", y[5])

        y[6] = mathutils.Euler(((A/0.10599)*A, (2.79985/0.431828)*A, 0.0), 'XYZ')
        print ("y6 =", y[6])

        o[2] = mathutils.Euler(((0.516001/0.431828)*A, (-0.516001/0.431828)*A, 0.0), 'XYZ')
        print ("o2 =", o[2])
        
        o[3] = mathutils.Euler(((0.344001/0.431828)*A, (-0.637623/0.431828)*A, 0.0), 'XYZ')
        print ("o3 =", o[3])
        
        o[4] = mathutils.Euler(((-0.786222/0.431828)*A, (-A/0.10599)*A, 0.0), 'XYZ')
        print ("o4 =", o[4])
        
        o[5] = mathutils.Euler(((0.308378/0.431828)*A, (2.50622/0.431828)*A, 0.0), 'XYZ')
        print ("o5 =", o[5])
        
    # Parent set disciple to master
    def setParent(self, helicity, move, rig, disciple_loc, disciple_rot, disciple, 
            disciple2_loc, disciple2_rot, disciple2, disciple3_loc, disciple3_rot, disciple3):

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.context.scene.frame_current = 0

        bpy.ops.object.select_all(action='DESELECT')
        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig

        bpy.ops.object.editmode_toggle()

        parent_bone = 'b5y5' # choose the bone name which you want to be the parent

        rig.data.edit_bones.active = rig.data.edit_bones[parent_bone]

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        #disciple
        disciple.rig.select_set(state=True)

        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig    #the active object will be the parent of all selected object

        bpy.ops.object.parent_set(type='BONE', keep_transform=True)

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        # disciple position
        disciple.rig.location.x += disciple_loc[0]
        disciple.rig.location.y += disciple_loc[1]
        disciple.rig.location.z += disciple_loc[2]

        disciple.rig.rotation_euler = disciple_rot
        

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.context.scene.frame_current = 0

        bpy.ops.object.select_all(action='DESELECT')
        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig

        bpy.ops.object.editmode_toggle()

        parent_bone = 'b5y5' # choose the bone name which you want to be the parent

        rig.data.edit_bones.active = rig.data.edit_bones[parent_bone]

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        #disciple2
        disciple2.rig.select_set(state=True)

        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig    #the active object will be the parent of all selected object

        bpy.ops.object.parent_set(type='BONE', keep_transform=True)

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        # disciple2 position
        disciple2.rig.location.x += disciple2_loc[0]
        disciple2.rig.location.y += disciple2_loc[1]
        disciple2.rig.location.z += disciple2_loc[2]

        disciple2.rig.rotation_euler = disciple2_rot
        
        
        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.context.scene.frame_current = 0

        bpy.ops.object.select_all(action='DESELECT')
        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig

        bpy.ops.object.editmode_toggle()

        parent_bone = 'y4y5' # choose the bone name which you want to be the parent

        rig.data.edit_bones.active = rig.data.edit_bones[parent_bone]

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        #disciple3
        disciple3.rig.select_set(state=True)

        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig    #the active object will be the parent of all selected object

        bpy.ops.object.parent_set(type='BONE', keep_transform=True)

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        # disciple2 position
        disciple3.rig.location.x += disciple3_loc[0]
        disciple3.rig.location.y += disciple3_loc[1]
        disciple3.rig.location.z += disciple3_loc[2]

        disciple3.rig.rotation_euler = disciple3_rot


class LeftIlium(RightIlium):

    J = 7 #joint number

    def configMovement(self, P, A, J, a, b, y, o):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        o[1] = mathutils.Euler((A, A, 0.0), 'XYZ')
        print ("o1 =", o[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D
        
        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])

        b[2] = mathutils.Euler(((A*3/0.10599)*A, (A/0.10599)*A, 0.0), 'XYZ')
        print ("b2 =", b[2])

        b[3] = mathutils.Euler(((0.222378/0.431828)*A, (-0.516001/0.431828)*A, 0.0), 'XYZ')
        print ("b3 =", b[3])

        b[4] = mathutils.Euler(((0.344001/0.431828)*A, (-0.344001/0.431828)*A, 0.0), 'XYZ')
        print ("b4 =", b[4])
        
        b[5] = mathutils.Euler(((-0.786223/0.431828)*A, (-3.36622/0.431828)*A, 0.0), 'XYZ')
        print ("b5 =", b[5])

        y[2] = mathutils.Euler(((A/0.10599)*A, (-A/0.10599)*A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        y[3] = mathutils.Euler(((0.222378/0.431828)*A, (-0.637623/0.431828)*A, 0.0), 'XYZ')
        print ("y3 =", y[3])

        y[4] = mathutils.Euler(((A/0.10599)*A, (-A/0.10599)*A, 0.0), 'XYZ')
        print ("y4 =", y[4])

        y[5] = mathutils.Euler(((A/0.10599)*A, (-3.36622/0.431828)*A, 0.0), 'XYZ')
        print ("y5 =", y[5])

        y[6] = mathutils.Euler(((A/0.10599)*A, (-3.65985/0.431828)*A, 0.0), 'XYZ')
        print ("y6 =", y[6])

        o[2] = mathutils.Euler(((0.516001/0.431828)*A, (-0.516001/0.431828)*A, 0.0), 'XYZ')
        print ("o2 =", o[2])
        
        o[3] = mathutils.Euler(((0.344001/0.431828)*A, (-0.637623/0.431828)*A, 0.0), 'XYZ')
        print ("o3 =", o[3])
        
        o[4] = mathutils.Euler(((-0.786223/0.431828)*A, (-A/0.10599)*A, 0.0), 'XYZ')
        print ("o4 =", o[4])
        
        o[5] = mathutils.Euler(((0.308378/0.431828)*A, (-3.36622/0.431828)*A, 0.0), 'XYZ')
        print ("o5 =", o[5])
    
        
class Sacrum(Formula):

    J = 4 #joint number

    # Overriding
    def __init__(self, P, A, move, part, helicity, start, end, 
            disciple_loc, disciple_rot, disciple, disciple2):

        global interval
        global frame_start
        global frame_end

        self.interval = interval
        self.frame_start = frame_start
        self.frame_end = frame_end

        # pivot factor
        self.P = P

        # scale factor
        self.A = A 

        # name
        self.move = move

        # element
        self.part = part

        # element helicity
        self.helicity = helicity

        self.start = start
        self.end = end

        # disciple position
        self.disciple_loc = disciple_loc
        self.disciple_rot = disciple_rot

        # disciple
        self.disciple = disciple
        self.disciple2 = disciple2

        # Create armature and object
        self.amt = bpy.data.armatures.new(move + '.' + part + '.' + helicity + '.data')
        self.rig = bpy.data.objects.new(move + '.' + part + '.' + helicity, self.amt)

        # Joints
        self.a = [0 for i in range(4)] # Joint α
        self.b = [0 for i in range(self.J)] # Joint β
        self.y = [0 for i in range(self.J)] # Joint γ
        self.o = [0 for i in range(self.J)] # Joint δ

        # Configuration Movement
        self.configMovement(self.P, self.A, self.J, self.a, self.b, self.y, self.o)

        # Construction Movement
        self.constructMovement(self.J, self.helicity, self.amt, self.rig, self.a, self.b, self.y, self.o)

        # Parent set disciple to master        
        self.setParent(self.helicity, self.move, self.rig, self.disciple_loc, self.disciple_rot, self.disciple, self.disciple2)

        # Construction Rotation
        self.configRotation(self.rig, self.interval, self.frame_start, self.frame_end, self.start, self.end)

        # Configuration Linkage
        self.configLink(self.A*0.15, self.J, self.helicity, self.rig, self.move, self.part)

        # Construction Linkage
        self.constructLink(self.A*0.15, self.J, self.helicity, self.rig, self.move, self.part)

    # Overriding Configuration Movement
    def configMovement(self, P, A, J, a, b, y, o):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        o[1] = mathutils.Euler((A, A, 0.0), 'XYZ')
        print ("o1 =", o[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D

        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])

        b[2] = a[2]
        print ("b2 =", b[2])
        
        y[2] = mathutils.Euler((-A, -A*3, 0.0), 'XYZ')
        print ("y2 =", y[2])

        y[3] = mathutils.Euler((-A, -A*3.5, 0.0), 'XYZ')
        print ("y3 =", y[3])

        o[2] = mathutils.Euler((-A*0.5, -A*3, 0.0), 'XYZ')
        print ("o2 =", o[2])
        

    # Parent set disciple to master
    def setParent(self, helicity, move, rig, disciple_loc, disciple_rot, disciple, disciple2):

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.context.scene.frame_current = 0

        bpy.ops.object.select_all(action='DESELECT')
        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig

        bpy.ops.object.editmode_toggle()

        parent_bone = 'y1a2' # choose the bone name which you want to be the parent

        rig.data.edit_bones.active = rig.data.edit_bones[parent_bone]

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        disciple.rig.select_set(state=True)
        disciple2.rig.select_set(state=True)
        
        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig    #the active object will be the parent of all selected object

        bpy.ops.object.parent_set(type='BONE', keep_transform=True)

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        # disciple position
        disciple.rig.location.x += disciple_loc[0]
        disciple.rig.location.y += disciple_loc[1]
        disciple.rig.location.z += disciple_loc[2]

        disciple.rig.rotation_euler = disciple_rot
        
        disciple2.rig.location.x += disciple_loc[0]
        disciple2.rig.location.y += disciple_loc[1]
        disciple2.rig.location.z += disciple_loc[2]

        disciple2.rig.rotation_euler = disciple_rot
        
    def configLink(self, A, J, helicity, rig, move, part):

        bpy.ops.object.mode_set(mode='OBJECT')
    
        Q = (0.18648+0.146446)*A
    #   Z = -Q*2
        Z = 0.0

        obj_joint = bpy.data.objects["joint.gold.000"].copy()
        obj_joint.location = (0.0, 0.0, -Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2a1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.silver.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1a2.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.copper.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2o1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.blue.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a1b1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)


        for n in range(1, J - 1):

            if n <= (J-2):

                # Pattern 2 of by
                obj_joint = bpy.data.objects["joint.green.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "b"+str(n)+"y"+str(n)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yy
#                if n == 3:
#                    obj_joint = bpy.data.objects["joint.gold.y3y4.shoulder.thoracic"].copy()
#                else:
#                    obj_joint = bpy.data.objects["joint.gold.00"+str(1 + (n+1) % 2)].copy()                    
                obj_joint = bpy.data.objects["joint.gold.00"+str(1 + (n+1) % 2)].copy()                    

                obj_joint.location = (0.0, 0.0, +Q*(1 - (n % 2))*2+Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n)+"y"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)


            if n <= (J-3):

                # Pattern 1 of ob
                obj_joint = bpy.data.objects["joint.blue.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q*2 + Q*(n % 2)*6 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "o"+str(n)+"b"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yo
                obj_joint = bpy.data.objects["joint.copper.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n+1)+"o"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)


        for ob in data.collections['link'].objects:
            if "mesh" in ob.name:
                ob.select_set(state = True, view_layer = None)

        bpy.ops.object.make_single_user(type='SELECTED_OBJECTS', object=True, obdata=True, material=True, animation=True)
        bpy.context.scene.cursor.location = (0.0, 0.0, 0.0)
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')
        
        
class Thoracic(Formula):

    J = 6 #joint number

    # Overriding
    def __init__(self, P, A, move, part, helicity, start, end, disciple_loc, disciple_rot, disciple):

        global interval
        global frame_start
        global frame_end

        self.interval = interval
        self.frame_start = frame_start
        self.frame_end = frame_end

        # pivot factor
        self.P = P

        # scale factor
        self.A = A 

        # name
        self.move = move

        # element
        self.part = part

        # element helicity
        self.helicity = helicity

        self.start = start
        self.end = end

        # disciple position
        self.disciple_loc = disciple_loc
        self.disciple_rot = disciple_rot

        # disciple
        self.disciple = disciple

        # Create armature and object
        self.amt = bpy.data.armatures.new(move + '.' + part + '.' + helicity + '.data')
        self.rig = bpy.data.objects.new(move + '.' + part + '.' + helicity, self.amt)

        # Joints
        self.a = [0 for i in range(4)] # Joint α
        self.b = [0 for i in range(self.J)] # Joint β
        self.y = [0 for i in range(self.J)] # Joint γ
        self.o = [0 for i in range(self.J)] # Joint δ

        # Configuration Movement
        self.configMovement(self.P, self.A, self.J, self.a, self.b, self.y, self.o)

        # Construction Movement
        self.constructMovement(self.J, self.helicity, self.amt, self.rig, self.a, self.b, self.y, self.o)

        # Parent set disciple to master        
        self.setParent(self.helicity, self.move, self.rig, self.disciple_loc, self.disciple_rot, self.disciple)

        # Construction Rotation
        self.configRotation(self.rig, self.interval, self.frame_start, self.frame_end, self.start, self.end)

        # Configuration Linkage
        self.configLink(self.A*0.4, self.J, self.helicity, self.rig, self.move, self.part)

        # Construction Linkage
        self.constructLink(self.A*0.4, self.J, self.helicity, self.rig, self.move, self.part)

    # Overriding Configuration Movement
    def configMovement(self, P, A, J, a, b, y, o):

        a[1] = mathutils.Euler((P, A, 0.0), 'XYZ')
        print ("a1 =", a[1])

        a[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("a2 =", a[2])

        b[1] = mathutils.Euler((-A, A, 0.0), 'XYZ')
        print ("b1 =", b[1])

        o[1] = mathutils.Euler((A, A, 0.0), 'XYZ')
        print ("o1 =", o[1])

        B = A * 2 * sqrt (2)
        C = B + (B * sqrt (2))
        D = C * sqrt (2)
        E = C + D

        y[1] = mathutils.Euler((-A, -A, 0.0), 'XYZ')
        print ("y1 =", y[1])

        b[2] = mathutils.Euler(((1.6125/0.539785)*A, A, 0.0), 'XYZ')
        print ("b2 =", b[2])

        b[3] = mathutils.Euler(((0.277888/0.539785)*A, (-0.645/0.539785)*A, 0.0), 'XYZ')
        print ("b3 =", b[3])
        
        b[4] = mathutils.Euler(((-1.24461/0.539785)*A, (2.87553/0.539785)*A, 0.0), 'XYZ')
        print ("b4 =", b[4])
        
        y[2] = mathutils.Euler((A, -A, 0.0), 'XYZ')
        print ("y2 =", y[2])

        y[3] = mathutils.Euler(((0.277973/0.539785)*A, (-0.797027/0.539785)*A, 0.0), 'XYZ')
        print ("y3 =", y[3])

        o[2] = mathutils.Euler(((0.645/0.539785)*A, (-0.645/0.539785)*A, 0.0), 'XYZ')
        print ("o2 =", o[2])
        
        o[3] = mathutils.Euler(((-1.24231/0.539785)*A, (-0.797027/0.539785)*A, 0.0), 'XYZ')
        print ("o3 =", o[3])
        
        o[4] = mathutils.Euler(((0.125947/0.539785)*A, (2.87554/0.539785)*A, 0.0), 'XYZ')
        print ("o4 =", o[4])
        
        y[4] = mathutils.Euler(((0.277954/0.539785)*A, (2.87554/0.539785)*A, 0.0), 'XYZ')
        print ("y4 =", y[4])
        
        y[5] = mathutils.Euler(((0.277952/0.539785)*A, (3.24257/0.539785)*A, 0.0), 'XYZ')
        print ("y5 =", y[5])

    # Parent set disciple to master
    def setParent(self, helicity, move, rig, disciple_loc, disciple_rot, disciple):

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.context.scene.frame_current = 0

        bpy.ops.object.select_all(action='DESELECT')
        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig

        bpy.ops.object.editmode_toggle()

        parent_bone = 'y3y4' # choose the bone name which you want to be the parent

        rig.data.edit_bones.active = rig.data.edit_bones[parent_bone]

        bpy.ops.object.mode_set(mode='OBJECT')

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        disciple.rig.select_set(state=True)

        rig.select_set(state=True)
        bpy.context.view_layer.objects.active = rig    #the active object will be the parent of all selected object

        bpy.ops.object.parent_set(type='BONE', keep_transform=True)

        bpy.ops.object.select_all(action='DESELECT') #deselect all objects

        # disciple position
        disciple.rig.location.x += disciple_loc[0]
        disciple.rig.location.y += disciple_loc[1]
        disciple.rig.location.z += disciple_loc[2]

        disciple.rig.rotation_euler = disciple_rot
        
    def configLink(self, A, J, helicity, rig, move, part):

        bpy.ops.object.mode_set(mode='OBJECT')
    
        Q = (0.18648+0.146446)*A
    #   Z = -Q*2
        Z = 0.0

        obj_joint = bpy.data.objects["joint.gold.000"].copy()
        obj_joint.location = (0.0, 0.0, -Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2a1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.silver.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "y1a2.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.copper.001"].copy()
        obj_joint.location = (0.0, 0.0, +Q*3+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a2o1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)

        obj_joint = bpy.data.objects["joint.blue.001"].copy()
        obj_joint.location = (0.0, 0.0, -Q*2+Z)
        obj_joint.scale = (A, A, A)
        obj_joint.name = "a1b1.mesh." + move + '.' + part +'.' + helicity
        bpy.data.collections['link'].objects.link(obj_joint)


        for n in range(1, J - 1):

            if n <= (J-2):

                # Pattern 2 of by
                obj_joint = bpy.data.objects["joint.green.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "b"+str(n)+"y"+str(n)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yy
                if n == 3:
                    obj_joint = bpy.data.objects["joint.gold.y3y4.shoulder.thoracic"].copy()
                else:
                    obj_joint = bpy.data.objects["joint.gold.00"+str(1 + (n+1) % 2)].copy()                    

                obj_joint.location = (0.0, 0.0, +Q*(1 - (n % 2))*2+Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n)+"y"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)


            if n <= (J-3):

                # Pattern 1 of ob
                obj_joint = bpy.data.objects["joint.blue.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q*2 + Q*(n % 2)*6 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "o"+str(n)+"b"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)

                # Pattern 2 of yo
                obj_joint = bpy.data.objects["joint.copper.001"].copy()
                obj_joint.location = (0.0, 0.0, -Q + Q*((n+1) % 2)*4 +Z)
                obj_joint.scale = (A, A, A)
                obj_joint.name = "y"+str(n+1)+"o"+str(n+1)+".mesh." + move + '.' + part +'.' + helicity
                bpy.data.collections['link'].objects.link(obj_joint)


        for ob in data.collections['link'].objects:
            if "mesh" in ob.name:
                ob.select_set(state = True, view_layer = None)

        bpy.ops.object.make_single_user(type='SELECTED_OBJECTS', object=True, obdata=True, material=True, animation=True)
        bpy.context.scene.cursor.location = (0.0, 0.0, 0.0)
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')
        

def formula():

# pivot factor
    P = 0

# scale factor
    A = 1
    
# joint number
    J = 6
    
# name
    move = 'formula'

# element
    part = 'universe'

# left or right
    helicity = 'left'

    start = 0
    end = start+360

    formula = Formula(P, A, J, move, part, helicity, start, end)


def forelegs():

# scale factor
    A = 0.052145

# pivot factor
    P = (-0.0260725/0.052145)*A

# name
    move = 'dungbeetle'
    
# foreleg element
    part = 'foreleg-left'

# right foreleg element
    helicity = 'right'

    start = 180
    end = start-720

    global foreleg_left
    foreleg_left = ForeLeg(P, A, move, part, helicity, start, end)

# foreleg element
    part = 'foreleg-right'

# left foreleg element
    helicity = 'left'

    start = -180+180
    end = start+720

    global foreleg_right
    foreleg_right = ForeLeg(P, A, move, part, helicity, start, end)


def forewings():

# scale factor
    A = 0.034172 #331.31
#    A = 0.2211544 # 0.276443*0.8 #294.32
#    A = 0.1769235 # 0.2211544*0.8 #294.33

# pivot factor
    P = 0
    
# name
    move = 'dungbeetle'

# element
    part = 'forewing-left'

# left or right
    helicity = 'left'

    start = -180
    end = start-720
    
    global foreleg_left

    foreleg_loc = ((-0.244404/0.034172)*A, (-0.404283/0.034172)*A, (0.40027/0.034172)*A) #331.51
#    foreleg_loc = ((-0.574704/0.1769235)*A, (-2.2352/0.1769235)*A, (3.31925/0.1769235)*A) #294.53
    foreleg_rot = mathutils.Euler((math.radians(125.472), math.radians(-4.98563), math.radians(-94.1281)), 'XYZ')

    global forewing_left
    forewing_left = ForeWing(P, A, move, part, helicity, start, end,
            foreleg_loc, foreleg_rot, foreleg_left)

# element
    part = 'forewing-right'

# left or right
    helicity = 'right'

    start = 0
    end = start+720

    global foreleg_right

    foreleg_loc = ((-0.232694/0.034172)*A, (-0.407209/0.034172)*A, (-0.404878/0.034172)*A) #331.51
    foreleg_rot = mathutils.Euler((math.radians(-119.114), math.radians(3.92897), math.radians(-92.8507)), 'XYZ')

    global forewing_right
    forewing_right = ForeWing(P, A, move, part, helicity, start, end,
            foreleg_loc, foreleg_rot, foreleg_right)


def head():

# scale factor
    A = 0.242908

# pivot factor
    P = (-0.182182/0.242908)*A
    
# name
    move = 'dungbeetle'

# element
    part = 'head'

# left or right
    helicity = 'left'

    start = 180
    end = start-1440

    global head
    head = Head(P, A, move, part, helicity, start, end)


def neck():
    
# scale factor
    A = 0.114004
    
# pivot factor
    P = 0

# name
    move = 'dungbeetle'

# neck element
    part = 'neck'

# helicity
    helicity = 'left'

    start = 0
    end = start

    head_loc = ((-0.143993/0.114004)*A, (-0.164966/0.114004)*A, (0.221022/0.114004)*A)
    head_rot = mathutils.Euler((math.radians(68.0883), math.radians(95.3065), math.radians(171.009)), 'XYZ')

    global head
    
    global neck
    neck = Neck(P, A, move, part, helicity, start, end, head_loc, head_rot, head)


def shoulder():

    start = 0
    end = start-720
 
# name
    move = 'dungbeetle'
    
# scale factor
    A = 0.070129

# pivot factor
    P = (-0.065732/0.070129)*A

# element
    part = 'left-shoulder'

# left or right
    helicity = 'right'

    global forewing_left
    forewing = forewing_left

#    forewing_loc = ((0.35176/0.070129)*A, (-0.667466/0.070129)*A, (1.13416/0.070129)*A)
    forewing_loc = ((0.31726/0.070129)*A, (-0.723133/0.070129)*A, (1.16807/0.070129)*A)
    forewing_rot = mathutils.Euler((math.radians(91.197), math.radians(34.3053), math.radians(-178.592)), 'XYZ')

    global shoulder_left
    shoulder_left = LeftShoulder(P, A, move, part, helicity, start, end,
        forewing_loc, forewing_rot, forewing)

# element
    part = 'right-shoulder'

    global neck

    neck_loc = ((0.387953/0.070129)*A, (0.111148/0.070129)*A, (-0.005181/0.070129)*A)
    neck_rot = mathutils.Euler((math.radians(179.212), math.radians(-3.77495), math.radians(-158.837)), 'XYZ')

    global forewing_right
    forewing = forewing_right

#    forewing_loc = ((0.320103/0.070129)*A, (0.598447/0.070129)*A, (1.13202/0.070129)*A)
    forewing_loc = ((0.288725/0.070129)*A, (0.654082/0.070129)*A, (1.16887/0.070129)*A)
    forewing_rot = mathutils.Euler((math.radians(90.7509), math.radians(34.537), math.radians(-179.065)), 'XYZ')

    global shoulder_right
    shoulder_right = RightShoulder(P, A, move, part, helicity, start, end,
        neck_loc, neck_rot, neck, forewing_loc, forewing_rot, forewing)


def costa():

# scale factor
    A = 0.140258

# pivot factor
    P = (-0.122727/0.140258)*A

# name
    move = 'dungbeetle'

# element
    part = 'costa'

# left or right
    helicity = 'left'

    start = -180
    end = start-720

    global shoulder_left
    global shoulder_right

    shoulder_loc = ((-1.14176/0.140258)*A, (-0.202573/0.140258)*A, (-0.052274/0.140258)*A)
    shoulder_rot = mathutils.Euler((math.radians(97.3024), math.radians(272.529), math.radians(83.0857)), 'XYZ')

    global costa
    costa = Costa(P, A, move, part, helicity, start, end,
        shoulder_loc, shoulder_rot, shoulder_left, shoulder_right)
        

def middletarsus():

# scale factor
    A = 0.031153

# pivot factor
    P = (-0.014019/0.031153)*A
    
# name
    move = 'dungbeetle'

# element
    part = 'middletarsus-right'

# left or right
    helicity = 'left'

    start = 90
    end = start+720

    global middletarsus_right
    middletarsus_right = Tarsus(P, A, move, part, helicity, start, end)

# element
    part = 'middletarsus-left'

# left or right
    helicity = 'right'

    start = 90
    end = start-720

    global middletarsus_left
    middletarsus_left = Tarsus(P, A, move, part, helicity, start, end)


def middleankles():
    
# scale factor
    A = 0.083044
    
# pivot factor
    P = (0.041522/0.083044)*A

# name
    move = 'dungbeetle'


# middleankle element
    part = 'middleankle-left'

# helicity
    helicity = 'left'

    start = -90+180
    end = start+720

    middletarsus_loc = ((0.084344/0.083044)*A, (-0.043678/0.083044)*A, (-0.019739/0.083044)*A)
    middletarsus_rot = mathutils.Euler((math.radians(18.187), math.radians(54.5504), math.radians(39.397)), 'XYZ')

    global middletarsus_left
    middletarsus = middletarsus_left
    
    global middleankle_left
    middleankle_left = Ankle(P, A, move, part, helicity, start, end, middletarsus_loc, middletarsus_rot, middletarsus)


# right middleankle element
    part = 'middleankle-right'

# helicity
    helicity = 'right'

    start = 90
    end = start-720

    middletarsus_loc = ((0.084211/0.083044)*A, (-0.043721/0.083044)*A, (0.019834/0.083044)*A)
    middletarsus_rot = mathutils.Euler((math.radians(-18.059), math.radians(-54.6715), math.radians(39.4639)), 'XYZ')

    global middletarsus_right
    middletarsus = middletarsus_right
    
    global middleankle_right
    middleankle_right = Ankle(P, A, move, part, helicity, start, end, middletarsus_loc, middletarsus_rot, middletarsus)
 

def middlelegs():

# scale factor
    A = 0.049732

# pivot factor
    P = (-0.0245445/0.049732)*A
    
# name
    move = 'dungbeetle'

# element
    part = 'middleleg-left'

# left or right
    helicity = 'right'

    start = 180
    end = start-720

    global middleankle_left
    middleankle = middleankle_left

    middleankle_loc = ((2.2029/0.049732)*A, (-0.713449/0.049732)*A, (-0.055864/0.049732)*A)
    middleankle_rot = mathutils.Euler((math.radians(-30.311), math.radians(-10.1309), math.radians(-33.553)), 'XYZ')

    global middleleg_left
    middleleg_left = MiddleLeg(P, A, move, part, helicity, start, end, middleankle_loc, middleankle_rot, middleankle)

# element
    part = 'middleleg-right'

# left or right
    helicity = 'left'

    start = 0
    end = start+720

    global middleankle_right
    middleankle = middleankle_right

    middleankle_loc = ((2.2029/0.049732)*A, (-0.713449/0.049732)*A, (0.055864/0.049732)*A)
    middleankle_rot = mathutils.Euler((math.radians(30.311), math.radians(10.1309), math.radians(-33.553)), 'XYZ')

    global middleleg_right
    middleleg_right = MiddleLeg(P, A, move, part, helicity, start, end, middleankle_loc, middleankle_rot, middleankle)


def middlewings():

# scale factor
    A = 0.034172 #331.31

# pivot factor
    P = 0
    
# name
    move = 'dungbeetle'

# element
    part = 'middlewing-left'

# left or right
    helicity = 'left'

    start = 0
    end = start-720
    
    global middleleg_left

    middleleg_loc = ((-0.136551/0.034172)*A, (-0.411457/0.034172)*A, (0.350503/0.034172)*A) #331.51
    middleleg_rot = mathutils.Euler((math.radians(103.767), math.radians(3.03273), math.radians(-93.755)), 'XYZ')

    global middlewing_left
    middlewing_left = MiddleWing(P, A, move, part, helicity, start, end,
            middleleg_loc, middleleg_rot, middleleg_left)

# element
    part = 'middlewing-right'

# left or right
    helicity = 'right'

    start = 180
    end = start+720

    global middleleg_right

    middleleg_loc = ((-0.135858/0.034172)*A, (-0.411586/0.034172)*A, (-0.350699/0.034172)*A) #331.51
    middleleg_rot = mathutils.Euler((math.radians(-103.767), math.radians(-3.03273), math.radians(-93.755)), 'XYZ')

    global middlewing_right
    middlewing_right = MiddleWing(P, A, move, part, helicity, start, end,
            middleleg_loc, middleleg_rot, middleleg_right)


def hindtarsus():

# scale factor
    A = 0.0414011

# pivot factor
    P = (-0.018675/0.0414011)*A
    
# name
    move = 'dungbeetle'

# element
    part = 'hindtarsus-right'

# left or right
    helicity = 'left'

    start = -90
    end = start+720

    global hindtarsus_right
    hindtarsus_right = Tarsus(P, A, move, part, helicity, start, end)

# element
    part = 'hindtarsus-left'

# left or right
    helicity = 'right'

    start = -90
    end = start-720

    global hindtarsus_left
    hindtarsus_left = Tarsus(P, A, move, part, helicity, start, end)


def hindankles():
    
# scale factor
    A = 0.1079572
    
# pivot factor
    P = (0.053984/0.1079572)*A

# name
    move = 'dungbeetle'


# hindankle element
    part = 'hindankle-left'

# helicity
    helicity = 'left'

    start = 90-180
    end = start+720

    hindtarsus_loc = ((0.1032/0.1079572)*A, (-0.052668/0.1079572)*A, (-0.018981/0.1079572)*A)
    hindtarsus_rot = mathutils.Euler((math.radians(30.3335), math.radians(50.3504), math.radians(55.2761)), 'XYZ')
    global hindtarsus_left
    hindtarsus = hindtarsus_left
    
    global hindankle_left
    hindankle_left = Ankle(P, A, move, part, helicity, start, end, hindtarsus_loc, hindtarsus_rot, hindtarsus)


# right hindankle element
    part = 'hindankle-right'

# helicity
    helicity = 'right'

    start = -90
    end = start-720

    hindtarsus_loc = ((0.1032/0.1079572)*A, (-0.052668/0.1079572)*A, (0.018981/0.1079572)*A)
    hindtarsus_rot = mathutils.Euler((math.radians(-30.3335), math.radians(-50.3504), math.radians(55.2761)), 'XYZ')

    global hindtarsus_right
    hindtarsus = hindtarsus_right
    
    global hindankle_right
    hindankle_right = Ankle(P, A, move, part, helicity, start, end, hindtarsus_loc, hindtarsus_rot, hindtarsus)
 

def hindlegs():

# scale factor
    A = 0.064893

# pivot factor
    P = (-0.032027/0.064893)*A
    
# name
    move = 'dungbeetle'

# element
    part = 'hindleg-left'

# left or right
    helicity = 'right'

    start = 0
    end = start-720

    global hindankle_left
    hindankle = hindankle_left

    hindankle_loc = ((2.93689/0.064893)*A, (-2.09319/0.064893)*A, (-0.07164/0.064893)*A)
    hindankle_rot = mathutils.Euler((math.radians(-30.1088), math.radians(-9.73026), math.radians(-73.318)), 'XYZ')

    global hindleg_left
    hindleg_left = HindLeg(P, A, move, part, helicity, start, end, hindankle_loc, hindankle_rot, hindankle)

# element
    part = 'hindleg-right'

# left or right
    helicity = 'left'

    start = -180
    end = start+720

    global hindankle_right
    hindankle = hindankle_right

    hindankle_loc = ((2.93689/0.064893)*A, (-2.09319/0.064893)*A, (0.07164/0.064893)*A)
    hindankle_rot = mathutils.Euler((math.radians(30.1088), math.radians(9.73026), math.radians(-73.318)), 'XYZ')

    global hindleg_right
    hindleg_right = HindLeg(P, A, move, part, helicity, start, end, hindankle_loc, hindankle_rot, hindankle)


def hindwings():

# scale factor
    A = 0.027337 #331.31

# pivot factor
    P = 0
    
# name
    move = 'dungbeetle'

# element
    part = 'hindwing-left'

# left or right
    helicity = 'left'

    start = 180
    end = start-720
    
    global hindleg_left

    hindleg_loc = ((-0.295121/0.027337)*A, (-0.315168/0.027337)*A, (0.304166/0.027337)*A) #331.51
    hindleg_rot = mathutils.Euler((math.radians(102.491), math.radians(31.3083), math.radians(-149.318)), 'XYZ')

    global hindwing_left
    hindwing_left = HindWing(P, A, move, part, helicity, start, end,
            hindleg_loc, hindleg_rot, hindleg_left)

# element
    part = 'hindwing-right'

# left or right
    helicity = 'right'

    start = 0
    end = start+720

    global hindleg_right

    hindleg_loc = ((-0.295121/0.027337)*A, (-0.315168/0.027337)*A, (-0.304166/0.027337)*A) #331.51
    hindleg_rot = mathutils.Euler((math.radians(-102.491), math.radians(-31.3083), math.radians(-149.318)), 'XYZ')

    global hindwing_right
    hindwing_right = HindWing(P, A, move, part, helicity, start, end,
            hindleg_loc, hindleg_rot, hindleg_right)
            
            
def wings():

# scale factor
    A = 0.034172 #911.23
#    A = 0.2211544 # 0.276443*0.8 #294.32
#    A = 0.1769235 # 0.2211544*0.8 #294.33

# pivot factor
    P = 0
    
# name
    move = 'dungbeetle'

# element
    part = 'wing-left'

# left or right
    helicity = 'left'

    start = 180
    end = start-1440

    global wing_left
    wing_left = Wing(P, A, move, part, helicity, start, end)

# element
    part = 'wing-right'

# left or right
    helicity = 'right'

    start = -180
    end = start+1440

    global wing_right
    wing_right = Wing(P, A, move, part, helicity, start, end)


def ilium():

# scale factor
    A = 0.10599

# pivot factor
    P = (-0.099344/0.10599)*A
       
# name
    move = 'dungbeetle'

# element
    part = 'ilium-left'

# left or right
    helicity = 'left'

    start = 0
    end = start+720

    global middlewing_left
    middlewing = middlewing_left

#    middlewing_loc = ((-0.136428/0.10599)*A, (-1.11142/0.10599)*A, (-0.656781/0.10599)*A)
    middlewing_loc = ((-0.08934/0.10599)*A, (-1.15973/0.10599)*A, (-0.676403/0.10599)*A)
    middlewing_rot = mathutils.Euler((math.radians(92.7257), math.radians(-113.976), math.radians(174.739)), 'XYZ')

    global hindwing_left
    hindwing = hindwing_left

#    hindwing_loc = ((-0.200608/0.10599)*A, (-0.578156/0.10599)*A, (-1.98864/0.10599)*A)
    hindwing_loc = ((-0.130526/0.10599)*A, (-0.635771/0.10599)*A, (-1.97529/0.10599)*A)
    hindwing_rot = mathutils.Euler((math.radians(-86.4762), math.radians(-36.8136), math.radians(-8.748)), 'XYZ')

    global wing_left
    wing = wing_left

    wing_loc = ((0.755968/0.10599)*A, (-1.23667/0.10599)*A, (-0.612139/0.10599)*A)
    wing_rot = mathutils.Euler((math.radians(-90), math.radians(-30.8426), math.radians(-180)), 'XYZ')

    global ilium_left
    ilium_left = LeftIlium(P, A, move, part, helicity, start, end, middlewing_loc, middlewing_rot, middlewing,
        hindwing_loc, hindwing_rot, hindwing, wing_loc, wing_rot, wing)

# element
    part = 'ilium-right'

    global middlewing_right
    middlewing = middlewing_right

#    middlewing_loc = ((-0.120107/0.10599)*A, (0.841941/0.10599)*A, (-0.649628/0.10599)*A)
    middlewing_loc = ((-0.06861/0.10599)*A, (0.886033/0.10599)*A, (-0.668353/0.10599)*A)
    middlewing_rot = mathutils.Euler((math.radians(92.205), math.radians(-113.98), math.radians(175.071)), 'XYZ')
    
    global hindwing_right
    hindwing = hindwing_right

#    hindwing_loc = ((-0.171159/0.10599)*A, (0.316169/0.10599)*A, (-1.98114/0.10599)*A)
    hindwing_loc = ((-0.094838/0.10599)*A, (0.364804/0.10599)*A, (-1.96635/0.10599)*A)
    hindwing_rot = mathutils.Euler((math.radians(88.4955), math.radians(-143.094), math.radians(180.827)), 'XYZ')

    global wing_right
    wing = wing_right

    wing_loc = ((0.744498/0.10599)*A, (1.01002/0.10599)*A, (-0.610289/0.10599)*A)
    wing_rot = mathutils.Euler((math.radians(90), math.radians(-149.223), math.radians(0.0)), 'XYZ')

    global ilium_right
    ilium_right = RightIlium(P, A, move, part, helicity, start, end, middlewing_loc, middlewing_rot, middlewing,
        hindwing_loc, hindwing_rot, hindwing, wing_loc, wing_rot, wing)


def sacrum():

# scale factor
    A = 0.134297

# pivot factor
    P = (-0.11751/0.134297)*A

# name
    move = 'dungbeetle'

# element
    part = 'sacrum'

# left or right 
    helicity = 'left'

    start = 0
    end = start-720

    global ilium_left
    global ilium_right

    ilium_loc = ((-0.131282/0.134297)*A, (-0.028278/0.134297)*A, (0.105302/0.134297)*A)
    ilium_rot = mathutils.Euler((math.radians(0.0), math.radians(91.5058), math.radians(0.0)), 'XYZ')

    global sacrum
    sacrum = Sacrum(P, A, move, part, helicity, start, end,
        ilium_loc, ilium_rot, ilium_left, ilium_right)
        
        
def spine():

# scale factor
    A = 0.187969

# pivot factor
    P = (-0.178805/0.187969)*A
    
# name
    move = 'dungbeetle'

# element
    part = 'spine'

# left or right
    helicity = 'left'

    start = 120
    end = start-1440

    global costa
    global sacrum
    
    costa_loc = ((-0.283775/0.187969)*A, (-0.085611/0.187969)*A, (0.146515/0.187969)*A)
    costa_rot = mathutils.Euler((math.radians(89.0815), math.radians(1.07163), math.radians(-45.3476)), 'XYZ')

    sacrum_loc = ((-0.094473/0.187969)*A, (-0.284406/0.187969)*A, (-0.13428/0.187969)*A)
    sacrum_rot = mathutils.Euler((math.radians(-449.047), math.radians(0.0), math.radians(135)), 'XYZ')

    global spine
    spine = Spine(P, A, move, part, helicity, start, end,
        costa_loc, costa_rot, costa, sacrum_loc, sacrum_rot, sacrum)


def thoracic():

# scale factor
    A = 0.07557

# pivot factor
    P = (-0.070847/0.07557)*A

# name
    move = 'dungbeetle'

# element
    part = 'thoracic'

# left or right
    helicity = 'left'

    start = 335
    end = start-720

    global spine

    spine_loc = ((0.142782/0.07557)*A, (-0.27955/0.07557)*A, (2.80869/0.07557)*A)
    spine_rot = mathutils.Euler((math.radians(90.113), math.radians(48.0244), math.radians(-61.46)), 'XYZ')

    global thoracic
    thoracic = Thoracic(P, A, move, part, helicity, start, end,
        spine_loc, spine_rot, spine)

    thoracic_loc = ((0.009107/0.07557)*A, (-4.1496/0.07557)*A, (0.436136/0.07557)*A)
    thoracic_rot = mathutils.Euler((math.radians(-83.0993), math.radians(-29.5415), math.radians(-3.61231)), 'XYZ')

    # position
    thoracic.rig.location.x += thoracic_loc[0]
    thoracic.rig.location.y += thoracic_loc[1]
    thoracic.rig.location.z += thoracic_loc[2]

    thoracic.rig.rotation_euler = thoracic_rot


def main(origin):
    
    # create new collection
    newCol = bpy.data.collections.new('movement')
    # link the newCol to the scene
    bpy.context.scene.collection.children.link(newCol)

    newCol = bpy.data.collections.new('link')
    bpy.context.scene.collection.children.link(newCol)

    global interval
    global frame_start
    global frame_end

    frame_start = 0
    frame_end = 240

    interval = frame_end - frame_start

#    formula()
    forelegs()
    forewings()
    head()
    neck()
    shoulder()
    costa()
    middletarsus()
    middleankles()
    middlelegs()
    middlewings()
    hindtarsus()
    hindankles()
    hindlegs()
    hindwings()
    wings()
    ilium()
    sacrum()
    spine()
    thoracic()


if __name__ == "__main__":
    # renaming of corrada objects
#    for ob in context.collection.objects:
#        if "joint_" in ob.name:
#            ob.name = ob.name.replace("_", ".")

    main((0.0, 0.0, 0.0))
